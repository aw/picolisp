<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>PicoLisp Libraries</title>
 <link href="https://picolisp.a1w.ca/atom.xml" rel="self"/>
 <link href="https://picolisp.a1w.ca/"/>
 <updated>2023-01-09T10:14:33+09:00</updated>
 <id>https://picolisp.a1w.ca</id>
 <author>
   <name>Alexander Williams</name>
   <email></email>
 </author>

 
 <entry>
   <title>PicoLisp FFI with Zig</title>
   <link href="https://picolisp.a1w.ca/2023/01/09/zig/"/>
   <updated>2023-01-09T00:00:00+09:00</updated>
   <id>https://picolisp.a1w.ca/2023/01/09/zig</id>
   <content type="html">&lt;p&gt;You can &lt;a href=&quot;https://github.com/aw/picolisp-zig&quot;&gt;get it on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This repo provides a simple example of how to use &lt;a href=&quot;https://software-lab.de/down.html&quot;&gt;PicoLisp&lt;/a&gt; with &lt;a href=&quot;https://ziglang.org/download/&quot;&gt;Zig&lt;/a&gt; using PicoLisp’s FFI &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(native)&lt;/code&gt; functionality.&lt;/p&gt;

&lt;p&gt;This is similar to &lt;a href=&quot;https://github.com/aw/picolisp-rust&quot;&gt;picolisp-rust&lt;/a&gt; except written for &lt;em&gt;Zig&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&quot;requirements&quot;&gt;Requirements&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Zig &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v0.6+&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;PicoLisp 64-bit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v17.12+&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pil21&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;getting-started&quot;&gt;Getting started&lt;/h1&gt;

&lt;p&gt;Once you’ve setup &lt;em&gt;PicoLisp&lt;/em&gt; and &lt;em&gt;Zig&lt;/em&gt;, simply type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make&lt;/code&gt; to build and test the shared library.&lt;/p&gt;

&lt;h1 id=&quot;output&quot;&gt;Output&lt;/h1&gt;

&lt;p&gt;Before I explain what’s going on, here’s what the output should look like:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Received struct: pil.PilStruct{ .byte1 = 32, .byte2 = 33, .character1 = 67, .character2 = 68, .int = -1, .long = 1, .string = u8@4847464544434241, .array = { 1, 2, 3, 4, 5, 6, 7, 8 } }
Result code: 0
Extracted struct: 
(de Extracted (42 43)
   (&quot;A&quot; &quot;B&quot;)
   65535
   9223372036854775807
   &quot;pilzig&quot;
   (80 105 99 111 76 105 115 112) )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;explain&quot;&gt;Explain&lt;/h1&gt;

&lt;p&gt;The code can be found in &lt;a href=&quot;extract.l&quot;&gt;extract.l&lt;/a&gt; and &lt;a href=&quot;pil.zig&quot;&gt;pil.zig&lt;/a&gt;. The &lt;em&gt;Zig&lt;/em&gt; code is designed as a &lt;strong&gt;shared library&lt;/strong&gt; and can be called by PicoLisp’s &lt;strong&gt;(native)&lt;/strong&gt; function to pass data to/from between both languages.&lt;/p&gt;

&lt;h2 id=&quot;picolisp-code-explanation&quot;&gt;PicoLisp code explanation&lt;/h2&gt;

&lt;p&gt;First, the code allocates 32 bytes of memory, which will be used to store data in a &lt;a href=&quot;https://software-lab.de/doc/refS.html#struct&quot;&gt;struct&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It then creates a struct named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt; with the following specification:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2 arbitrary bytes&lt;/li&gt;
  &lt;li&gt;2-bytes containing valid UTF-8 characters&lt;/li&gt;
  &lt;li&gt;1x 32-bit (4 bytes) signed integer&lt;/li&gt;
  &lt;li&gt;1x 64-bit (8 bytes) signed long&lt;/li&gt;
  &lt;li&gt;1x 8-byte null-terminated string&lt;/li&gt;
  &lt;li&gt;1x 8-byte arbitrary bytes array&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then the following &lt;a href=&quot;https://software-lab.de/doc/refN.html#native&quot;&gt;native&lt;/a&gt; call is made and its result is stored in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Res&lt;/code&gt; variable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-picolisp&quot;&gt;(native &quot;./libpil.so&quot; &quot;extract&quot; 'I P)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This calls the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extract&lt;/code&gt; function from the &lt;em&gt;Zig&lt;/em&gt; library, with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt; struct as its only parameter. It expects a 32-bit signed integer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I&lt;/code&gt; as the return value (it will be either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Next, the code will extract the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt; structure using the specification described above:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(struct P '((B . 2) (C . 2) I N S (B . 8)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, the code will free the previously allocated memory and print the result of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt; structure.&lt;/p&gt;

&lt;p&gt;Some tests run at the end to ensure the data received from &lt;em&gt;Zig&lt;/em&gt; is what we expected.&lt;/p&gt;

&lt;h3 id=&quot;note&quot;&gt;Note&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The values sent to the &lt;em&gt;Zig&lt;/em&gt; library will be printed by &lt;em&gt;Zig&lt;/em&gt; as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Received struct:&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The values received from the &lt;em&gt;Zig&lt;/em&gt; library will be printed by &lt;em&gt;PicoLisp&lt;/em&gt; as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Extracted struct:&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;zig-code-explanation&quot;&gt;Zig code explanation&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;Zig&lt;/em&gt; code defines the struct for the received data; it is named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PilStruct&lt;/code&gt; and contains the exact same specification as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt; struct in the &lt;em&gt;PicoLisp code explanation&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extract()&lt;/code&gt; function creates a new struct in the variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newstruct&lt;/code&gt; which contains some new values, different from what was received by &lt;em&gt;PicoLisp&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Luckily, the &lt;em&gt;Zig&lt;/em&gt; pointers &lt;a href=&quot;https://ziglang.org/learn/overview/#optional-type-instead-of-null-pointers&quot;&gt;cannot be &lt;strong&gt;null&lt;/strong&gt;&lt;/a&gt; so there’s no need to check for that.&lt;/p&gt;

&lt;p&gt;The code then dereferences the pointer and prints what it received (the entire struct) from &lt;em&gt;PicoLisp&lt;/em&gt; as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Received struct:&lt;/code&gt; (mentioned earlier).&lt;/p&gt;

&lt;p&gt;Finally, it writes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newstruct&lt;/code&gt; struct to the pointer and returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;. &lt;em&gt;PicoLisp&lt;/em&gt; can then read the return code and the new struct data.&lt;/p&gt;

&lt;h1 id=&quot;thoughts&quot;&gt;Thoughts&lt;/h1&gt;

&lt;p&gt;There isn’t much to this code, but I thought it would be fun to create a working FFI library that’s &lt;em&gt;not&lt;/em&gt; written in &lt;em&gt;C&lt;/em&gt; or &lt;em&gt;Rust&lt;/em&gt; and which works perfectly with &lt;em&gt;PicoLisp&lt;/em&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>PicoLisp FFI with Rust</title>
   <link href="https://picolisp.a1w.ca/2020/10/29/rust/"/>
   <updated>2020-10-29T00:00:00+09:00</updated>
   <id>https://picolisp.a1w.ca/2020/10/29/rust</id>
   <content type="html">&lt;p&gt;You can &lt;a href=&quot;https://github.com/aw/picolisp-rust&quot;&gt;get it on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This repo provides a simple example of how to use &lt;a href=&quot;https://software-lab.de/down.html&quot;&gt;PicoLisp&lt;/a&gt; with &lt;a href=&quot;https://www.rust-lang.org/tools/install&quot;&gt;Rust&lt;/a&gt; using PicoLisp’s FFI &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(native)&lt;/code&gt; functionality.&lt;/p&gt;

&lt;h1 id=&quot;requirements&quot;&gt;Requirements&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Rustc and Cargo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.47.0+&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;PicoLisp 64-bit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v17.12+&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pil21&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;getting-started&quot;&gt;Getting started&lt;/h1&gt;

&lt;p&gt;Once you’ve setup &lt;em&gt;PicoLisp&lt;/em&gt; and &lt;em&gt;Rust&lt;/em&gt;, simply type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make&lt;/code&gt; to build and test the shared library.&lt;/p&gt;

&lt;h1 id=&quot;output&quot;&gt;Output&lt;/h1&gt;

&lt;p&gt;Before I explain what’s going on, here’s what the output should look like:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Received struct: PilStruct {
    byte1: 32,
    byte2: 33,
    character1: 67,
    character2: 68,
    int: -1,
    long: 1,
    string: 0x4847464544434241,
    array: [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
    ],
}
Result code: 0
Extracted struct:
(de Extracted (42 43)
   (&quot;A&quot; &quot;B&quot;)
   65535
   9223372036854775807
   &quot;pilrust&quot;
   (80 105 99 111 76 105 115 112) )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;explain&quot;&gt;Explain&lt;/h1&gt;

&lt;p&gt;The code can be found in &lt;a href=&quot;extract.l&quot;&gt;extract.l&lt;/a&gt; and &lt;a href=&quot;src/lib.rs&quot;&gt;src/lib.rs&lt;/a&gt;. The &lt;em&gt;Rust&lt;/em&gt; code is designed as a &lt;strong&gt;shared library&lt;/strong&gt; and can be called by PicoLisp’s &lt;strong&gt;(native)&lt;/strong&gt; function to pass data to/from between both languages.&lt;/p&gt;

&lt;h2 id=&quot;picolisp-code-explanation&quot;&gt;PicoLisp code explanation&lt;/h2&gt;

&lt;p&gt;First, the code allocates 32 bytes of memory, which will be used to store data in a &lt;a href=&quot;https://software-lab.de/doc/refS.html#struct&quot;&gt;struct&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It then creates a struct named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt; with the following specification:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2 arbitrary bytes&lt;/li&gt;
  &lt;li&gt;2-bytes containing valid UTF-8 characters&lt;/li&gt;
  &lt;li&gt;1x 32-bit (4 bytes) signed integer&lt;/li&gt;
  &lt;li&gt;1x 64-bit (8 bytes) signed long&lt;/li&gt;
  &lt;li&gt;1x 8-byte null-terminated string&lt;/li&gt;
  &lt;li&gt;1x 8-byte arbitrary bytes array&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then the following &lt;a href=&quot;https://software-lab.de/doc/refN.html#native&quot;&gt;native&lt;/a&gt; call is made and its result is stored in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Res&lt;/code&gt; variable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-picolisp&quot;&gt;(native &quot;target/debug/libpilrust.so&quot; &quot;extract&quot; 'I P)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This calls the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extract&lt;/code&gt; function from the &lt;em&gt;Rust&lt;/em&gt; library, with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt; struct as its only parameter. It expects a 32-bit signed integer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I&lt;/code&gt; as the return value (it will be either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Next, the code will extract the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt; structure using the specification described above:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(struct P '((B . 2) (C . 2) I N S (B . 8)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, the code will free the previously allocated memory and print the result of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt; structure.&lt;/p&gt;

&lt;p&gt;Some tests run at the end to ensure the data received from &lt;em&gt;Rust&lt;/em&gt; is what we expected.&lt;/p&gt;

&lt;h3 id=&quot;note&quot;&gt;Note&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The values sent to the &lt;em&gt;Rust&lt;/em&gt; library will be printed by &lt;em&gt;Rust&lt;/em&gt; as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Received struct:&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The values received from the &lt;em&gt;Rust&lt;/em&gt; library will be printed by &lt;em&gt;PicoLisp&lt;/em&gt; as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Extracted struct:&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rust-code-explanation&quot;&gt;Rust code explanation&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;Rust&lt;/em&gt; code defines the struct for the received data; it is named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PilStruct&lt;/code&gt; and contains the exact same specification as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt; struct in the &lt;em&gt;PicoLisp code explanation&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extract()&lt;/code&gt; function creates a new struct in the variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newstruct&lt;/code&gt; which contains some new values, different from what was received by &lt;em&gt;PicoLisp&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Since FFI is considered &lt;a href=&quot;https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html&quot;&gt;unsafe in &lt;em&gt;Rust&lt;/em&gt;&lt;/a&gt;, the code which actually does the FFI (dereferencing the pointer and writing to it) is contained in an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unsafe&lt;/code&gt; block:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unsafe { ... playing with fire ... }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Luckily, the &lt;em&gt;Rust&lt;/em&gt; function checks if the struct is a &lt;strong&gt;null pointer&lt;/strong&gt; before trying to work with it, and returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt; if it is. However it doesn’t check if it’s correctly aligned (it is), so look-out for that!&lt;/p&gt;

&lt;p&gt;The code then dereferences the pointer and prints what it received (the entire struct) from &lt;em&gt;PicoLisp&lt;/em&gt; as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Received struct:&lt;/code&gt; (mentioned earlier).&lt;/p&gt;

&lt;p&gt;Finally, it writes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newstruct&lt;/code&gt; struct to the pointer and returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;. &lt;em&gt;PicoLisp&lt;/em&gt; can then read the return code and the new struct data.&lt;/p&gt;

&lt;h1 id=&quot;thoughts&quot;&gt;Thoughts&lt;/h1&gt;

&lt;p&gt;There isn’t much to this code, but I thought it would be fun to create a working FFI library that’s &lt;em&gt;not&lt;/em&gt; written in &lt;em&gt;C&lt;/em&gt; and which works perfectly with &lt;em&gt;PicoLisp&lt;/em&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>POSIX Message Queues library for PicoLisp</title>
   <link href="https://picolisp.a1w.ca/2020/09/16/posixmq/"/>
   <updated>2020-09-16T00:00:00+09:00</updated>
   <id>https://picolisp.a1w.ca/2020/09/16/posixmq</id>
   <content type="html">&lt;p&gt;You can &lt;a href=&quot;https://github.com/aw/picolisp-posixmq&quot;&gt;get it on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://man7.org/linux/man-pages/man7/mq_overview.7.html&quot;&gt;POSIX Message Queues&lt;/a&gt;&lt;/em&gt; provide a dependency-free mechanism for processes to exchange data in the form of messages.&lt;/p&gt;

&lt;p&gt;This library makes it simple to embed support for &lt;em&gt;POSIX Message Queues&lt;/em&gt; in &lt;a href=&quot;https://picolisp.com&quot;&gt;PicoLisp&lt;/a&gt; applications running on Linux.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-started&quot;&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#quick-start&quot;&gt;Quick Start&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#documentation&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;requirements&quot;&gt;Requirements&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;PicoLisp &lt;strong&gt;64-bit&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v17.12&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v20.7.16&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pil21&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Linux with kernel &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3.5+&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Kernel &lt;em&gt;POSIX Message Queues&lt;/em&gt; support&lt;/li&gt;
  &lt;li&gt;POSIX Realtime Extensions library (&lt;strong&gt;librt.so&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h1&gt;

&lt;p&gt;The first step is to run the unit tests: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make check&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If those fail, jump to the &lt;a href=&quot;https://github.com/aw/picolisp-posixmq/blob/master/docs/TUTORIALS.md&quot;&gt;TUTORIALS&lt;/a&gt; section to perform the initial setup and and system check.&lt;/p&gt;

&lt;p&gt;If all works well, then your system is ready to use this library.&lt;/p&gt;

&lt;h1 id=&quot;quick-start&quot;&gt;Quick Start&lt;/h1&gt;

&lt;p&gt;The code below illustrates how to use the queue for sending and receiving a message.&lt;/p&gt;

&lt;h4 id=&quot;example-code&quot;&gt;Example Code&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-picolisp&quot;&gt;(load &quot;mqueue.l&quot;)                               # load the library
(let Fd (pmq-open &quot;/myQ&quot; (list O_RDWR O_CREAT)) # create a read/write queue named &quot;/myQ&quot;
  (pmq-send Fd &quot;Hello World&quot;)                   # send the message &quot;Hello World&quot;
  (pmq-receive Fd)                              # receive the message
  (pmq-close Fd)                                # close the queue
  (pmq-unlink &quot;/myQ&quot;) )                         # remove the queue
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;example-output&quot;&gt;Example Output&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Verbose output is enabled by default and can be disabled with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(off *PMQ_verbose)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-none&quot;&gt;[2020-09-17T03:37:15] Opened queue: Name='/myqueue', FD=3
[2020-09-17T03:37:15] Send: String='Hello World', Priority=0, FD=3
[2020-09-17T03:37:15] Get attributes: Flags=0, Maxmsg=10, Msgsize=8192, Curmsgs=1, FD=3
[2020-09-17T03:37:15] Receive: String='Hello World' (12 Bytes), FD=3
[2020-09-17T03:37:15] Closed queue: FD=3
[2020-09-17T03:37:15] Unlinked queue: Name='/myqueue'
-&amp;gt; 0
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;documentation&quot;&gt;Documentation&lt;/h1&gt;

&lt;p&gt;Additional usage and reference documentation can be found in &lt;a href=&quot;https://github.com/aw/picolisp-posixmq/blob/master/docs/&quot;&gt;docs/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/aw/picolisp-posixmq/blob/master/docs/TUTORIALS.md&quot;&gt;TUTORIALS&lt;/a&gt;: some guides &lt;strong&gt;for beginners&lt;/strong&gt; to get started using this library&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/aw/picolisp-posixmq/blob/master/docs/HOWTO.md&quot;&gt;HOWTO&lt;/a&gt;: a set of recipes for performing more advanced tasks with this library&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/aw/picolisp-posixmq/blob/master/docs/EXPLAIN.md&quot;&gt;EXPLAIN&lt;/a&gt;: an explanation of some key concepts, including how this library works&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/aw/picolisp-posixmq/blob/master/docs/REFERENCE.md&quot;&gt;REFERENCE&lt;/a&gt;: technical information on the internals of this library&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Unicorn-inspired PicoLisp daemon to spawn and manage worker processes</title>
   <link href="https://picolisp.a1w.ca/2020/06/18/supervisor/"/>
   <updated>2020-06-18T00:00:00+09:00</updated>
   <id>https://picolisp.a1w.ca/2020/06/18/supervisor</id>
   <content type="html">&lt;p&gt;You can &lt;a href=&quot;https://github.com/aw/picolisp-supervisor&quot;&gt;get it on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This program mimics functionality of &lt;a href=&quot;https://yhbt.net/unicorn/&quot;&gt;Unicorn&lt;/a&gt;, without being limited to HTTP applications.&lt;/p&gt;

&lt;p&gt;The included &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;supervisor.l&lt;/code&gt; can be used to spawn multiple &lt;em&gt;worker&lt;/em&gt; processes which perform tasks in an infinite loop.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/153401/85007713-68f87b80-b14b-11ea-840e-aed11b992a72.png&quot; alt=&quot;Supervisor&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-started&quot;&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#usage&quot;&gt;Usage&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#notes-and-limitations&quot;&gt;Note and Limitations&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;requirements&quot;&gt;Requirements&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;PicoLisp 32-bit/64-bit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v17.12&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v20.6.29&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Linux or UNIX-like OS&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h1&gt;

&lt;p&gt;This library is written in pure PicoLisp and contains &lt;strong&gt;no external dependencies&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To ensure everything works on your system, run the tests first: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make check&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;try-the-test-app&quot;&gt;Try the test app&lt;/h3&gt;

&lt;p&gt;Launch the Supervisor with: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./supervisor.l --app testapp.l&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You’ll see output showing 1 worker &lt;em&gt;“Performing a task”&lt;/em&gt; in a loop. Wait until it completes a task or two, then press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl+C&lt;/code&gt; or send an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INT&lt;/code&gt; signal to tell the parent process to exit, along with its worker.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# example output
./supervisor.l --app testapp.l --workers 2
parent process ready pid=814
spawning 2 missing workers:
worker[0] spawning..
worker[1] spawning..
worker[0] spawned pid=815
worker[0] pid=815 do this after forking
worker[0] ready
worker[0] pid=815 Performing a task: sleeping for 12 seconds
worker[1] spawned pid=816
worker[1] pid=816 do this after forking
worker[1] ready
worker[1] pid=816 Performing a task: sleeping for 9 seconds
worker[1] pid=816 Performing a task: sleeping for 16 seconds
^Cworker[1] exited
worker[0] exited
parent exited
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Feel free to observe the example code in &lt;a href=&quot;testapp.l&quot;&gt;testapp.l&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;usage&quot;&gt;Usage&lt;/h1&gt;

&lt;p&gt;The supervisor runs in the foreground and simply manages the worker processes. If a worker (child process) exits, it will be re-spawned automatically by the supervisor. The supervisor periodically checks for missing workers, depending on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*SV_POLL_TIMEOUT&lt;/code&gt; variable.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# supervisor.l
Usage:                    ./supervisor.l --app &amp;lt;yourapp&amp;gt; [option] [arguments]

Example:                  ./supervisor.l --app app.l --workers 4 --poll 1

Options:
--help                    show this help message and exit

--app &amp;lt;yourapp&amp;gt;           Filename of the app which contains (worker-start)
--poll &amp;lt;seconds&amp;gt;          Number of seconds to poll for missing workers (default: 30)
--preload                 Load the app in the parent before forking the worker process (default: No)
--workers &amp;lt;number&amp;gt;        Number of workers to spawn (default: 1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;options&quot;&gt;Options&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--app&lt;/code&gt;: This option accepts 1 argument, a PicoLisp &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.l&lt;/code&gt; file. It will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(load)&lt;/code&gt;ed in the forked process of each worker (each time a worker is spawned), unless &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--preload&lt;/code&gt; is specified. Once the process is forked, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(worker-start)&lt;/code&gt; function will be called automatically, so that needs to be defined in your worker app.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--preload&lt;/code&gt;: This options takes no arguments. If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--preload&lt;/code&gt; is specified, the worker app will be loaded only once, in the parent process. Its code will be inherited by each worker process as it’s spawned. This should be more memory efficient (and faster) for large applications, but prevents changing the worker app “on the fly” (without restarting the supervisor).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--poll&lt;/code&gt;: This option accepts 1 argument, the number of seconds where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parent&lt;/code&gt; process will sleep before checking for any missing workers. For processes which take a long time to complete, or for non-busy servers, it’s probably safe to set the polling interval a bit higher (ex: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;60&lt;/code&gt; seconds). If there’s a need to know almost “right away” when a worker is missing, it is safe to set it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--workers&lt;/code&gt;: This option accepts 1 argument, the number of workers which should be spawned. The supervisor will remember this number and always ensure that it’s maintained. If 3 or 4 workers happen to exit, the supervisor will notice and respawn 3 workers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;notes-and-limitations&quot;&gt;Notes and limitations&lt;/h1&gt;

&lt;p&gt;This section will explain some important technical details about the code, and limitations on what this app can and can’t do.&lt;/p&gt;

&lt;h2 id=&quot;technical-notes&quot;&gt;Technical notes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;All global variables are prefixed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*SV_&lt;/code&gt;, and functions are prefixed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sv-&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Similar to &lt;a href=&quot;https://yhbt.net/unicorn/&quot;&gt;Unicorn&lt;/a&gt;, there are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(before-fork)&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(after-fork)&lt;/code&gt; hooks which will be called if they’re defined in your app (totally optional). Of course, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(before-fork)&lt;/code&gt; happens in the parent process, right before the child is forked, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(after-fork)&lt;/code&gt; happens in the child process, right after it’s forked.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(before-fork)&lt;/code&gt; hook will only be called when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--preload&lt;/code&gt; is provided, since there’s no way to call the function before the code is even loaded.&lt;/li&gt;
  &lt;li&gt;The unique sequential ID &lt;em&gt;number&lt;/em&gt; of the worker process will be sent as the one and only argument to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(before-fork)&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(after-fork)&lt;/code&gt;. This can be used in the app to conditionally perform tasks based on its ID (ex: worker ID 0 could verify the integrity of a database, while the other workers simply query it).&lt;/li&gt;
  &lt;li&gt;The supervisor is quite verbose, but this is necessary to see the status of what the workers are doing. Standard *NIX tools can be used to redirect output to a log file or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/null&lt;/code&gt; if needed.&lt;/li&gt;
  &lt;li&gt;Every time a worker loops on a task, it checks if the parent is still there. If not, it will exit cleanly on its own. This allows the parent to be stopped with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kill -9&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kill -KILL&lt;/code&gt;), and the workers will continue their work and exit cleanly when they’re done.&lt;/li&gt;
  &lt;li&gt;Sending a regular kill signal to the parent (ex: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kill -15&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kill -TERM&lt;/code&gt;) will terminate all workers and the parent immediately.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;limitations&quot;&gt;Limitations&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;This program was used in production for over 4 years and has been tested extensively under various loads. However it was modified heavily for public release and may contain bugs. Please use at your own risk.&lt;/li&gt;
  &lt;li&gt;This program is not an &lt;em&gt;exact copy&lt;/em&gt; of Unicorn, and differs in many areas. It is also missing many features of Unicorn such as extra signal handling and hot code-reloading. There is a plan to add those features in the future.&lt;/li&gt;
  &lt;li&gt;There are other ways to do something similar to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;supervisor.l&lt;/code&gt; in PicoLisp, feel free to use those techniques if you prefer.&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Redis-inspired key/value store written in PicoLisp</title>
   <link href="https://picolisp.a1w.ca/2020/06/16/keyvalue/"/>
   <updated>2020-06-16T00:00:00+09:00</updated>
   <id>https://picolisp.a1w.ca/2020/06/16/keyvalue</id>
   <content type="html">&lt;p&gt;You can &lt;a href=&quot;https://github.com/aw/picolisp-kv&quot;&gt;get it on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This program mimics functionality of a &lt;a href=&quot;https://redis.io&quot;&gt;Redis™&lt;/a&gt; in-memory database, but is designed specifically for &lt;a href=&quot;https://picolisp.com&quot;&gt;PicoLisp&lt;/a&gt; applications with optional on-disk persistence and encryption.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This library &lt;strong&gt;DOES NOT&lt;/strong&gt; use the &lt;a href=&quot;https://redis.io/topics/protocol&quot;&gt;RESP protocol&lt;/a&gt; and thus cannot work with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis-cli&lt;/code&gt; or other &lt;em&gt;Redis&lt;/em&gt; clients/servers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The included &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server.l&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client.l&lt;/code&gt; can be used to send and receive &lt;em&gt;“Redis-like”&lt;/em&gt; commands over TCP or UNIX named pipess.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/153401/84755112-ca381780-afb0-11ea-8d13-31d1a2152d2a.png&quot; alt=&quot;GET/SET&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-started&quot;&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#usage&quot;&gt;Usage&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#notes-and-limitations&quot;&gt;Note and Limitations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-it-works&quot;&gt;How it works&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#persistence&quot;&gt;Persistence&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;requirements&quot;&gt;Requirements&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;PicoLisp 32-bit/64-bit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v17.12&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v20.6.29&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pil21&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Linux or UNIX-like OS (with support for named pipes)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h1&gt;

&lt;p&gt;This library is written in pure PicoLisp and contains &lt;strong&gt;no external dependencies&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To ensure everything works on your system, run the tests first: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make check&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;using-the-cli-tools&quot;&gt;Using the CLI tools&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Launch a server with: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./server.l --pass &amp;lt;yourpass&amp;gt; --verbose&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Check the server info with: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./client.l --pass &amp;lt;yourpass&amp;gt; INFO&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That should return some interesting info about your server. See below for more examples.&lt;/p&gt;

&lt;h3 id=&quot;using-as-a-library&quot;&gt;Using as a library&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Server&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Load the library in your project: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(load &quot;libkv.l&quot;)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Set the server password: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(setq *KV_pass &quot;yourpass&quot;)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Start listening for requests: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(kv-listen)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Client&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Load the client library in your project: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(load &quot;libkvclient.l&quot;)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Set the server password &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(setq *KV_pass &quot;yourpass&quot;)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Start the client listener with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(kv-start-client)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Send your command and arguments with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(kv-send-data '(&quot;INFO&quot; &quot;server&quot;))&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Received data will be returned as-is (list, integer, string, etc). Wrap the result like: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(kv-print Result)&lt;/code&gt; to send the output to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STDOUT&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;: (load &quot;libkvclient.l&quot;)
-&amp;gt; kv-start-client
: (setq *KV_pass &quot;yourpass&quot;)
-&amp;gt; &quot;yourpass&quot;
: (kv-start-client)
-&amp;gt; T
: (kv-send-data '(&quot;set&quot; &quot;mykey&quot; 12345))
-&amp;gt; &quot;OK&quot;
: (kv-send-data '(&quot;get&quot; &quot;mykey&quot;))
-&amp;gt; 12345
: (kv-send-data '(&quot;set&quot; &quot;yourkey&quot; &quot;12345&quot;))
-&amp;gt; &quot;OK&quot;
: (kv-send-data '(&quot;get&quot; &quot;yourkey&quot;))
-&amp;gt; &quot;12345&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Feel free to observe the example code in &lt;a href=&quot;https://github.com/aw/picolisp-kv/blob/master/client.l&quot;&gt;client.l&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(kv-send-data)&lt;/code&gt; will send the data to the server and automatically block the client while waiting for a response.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;usage&quot;&gt;Usage&lt;/h1&gt;

&lt;p&gt;This section describes usage information for the CLI tools &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server.l&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client.l&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;server&quot;&gt;Server&lt;/h2&gt;

&lt;p&gt;The server listens in the foreground for TCP connections on port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6378&lt;/code&gt; by default. Only the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;port&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;persistence&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;verbosity&lt;/code&gt; are configurable, and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password&lt;/code&gt; is required:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# server.l
Usage:                    ./server.l --pass &amp;lt;pass&amp;gt; [options]

Example:                  ./server.l --pass foobared --port 6378 --verbose --persist 60

Options:
--help                    Show this help message and exit

--binary                  Store data in binary format instead of text (default: plaintext)
--pass &amp;lt;password&amp;gt;         Password used by clients to access the server (required)
--persist &amp;lt;seconds&amp;gt;       Number of seconds between database persists to disk (default: disabled)
--port &amp;lt;port&amp;gt;             TCP listen port for communication with clients (default: 6378)
--verbose                 Verbose flag (default: False)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./server.l --pass yourpass --verbose
Parent PID: 38867
[sibling]=38874
[child]=38873 [parent]=38867
[msg] from client: (pid: 38873) ::ffff:127.0.0.1 (&quot;IDENT&quot; (&quot;id&quot; . &quot;3F21CC32&quot;) (&quot;hostname&quot; . &quot;meta.lan&quot;))
[msg] from child : (pid: 38873) (&quot;message&quot; 38873 (&quot;IDENT&quot; (&quot;id&quot; . &quot;3F21CC32&quot;) (&quot;hostname&quot; . &quot;meta.lan&quot;)))
[msg]   to client: &quot;OK 3F21CC32&quot;
[msg] from client: (pid: 38873) ::ffff:127.0.0.1 (&quot;INFO&quot; &quot;server&quot;)
[msg] from child : (pid: 38873) (&quot;message&quot; 38873 (&quot;INFO&quot; &quot;server&quot;))
[msg]   to client: &quot;^J# Server^Japp_version:0.11.0^Jos:Linux 4.19.34-tinycore64 x86_64^Jarch_bits:64^Jprocess_id:38874^Jtcp_port:6378^Juptime_in_seconds:1^Juptime_in_days:0^Jexecutable:/usr/bin/picolisp^J&quot;
[child]=38873 exiting
[msg] from child : (pid: 38873) (&quot;done&quot; 38873 NIL)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;client&quot;&gt;Client&lt;/h2&gt;

&lt;p&gt;The client handles authentication, identification, and sending of &lt;em&gt;“Redis-like”&lt;/em&gt; commands to the server. It then prints the result to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STDOUT&lt;/code&gt; and can be parsed by standard &lt;em&gt;*NIX&lt;/em&gt; tools. The client receives &lt;em&gt;PLIO&lt;/em&gt; data over a TCP socket, or named pipe (if client/server are on the same system).&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# client.l
Usage:                    ./client.l --pass &amp;lt;pass&amp;gt; COMMAND [arguments]

Example:                  ./client.l --pass foobared --encrypt SET mysecret -- &amp;lt;(echo 'mypass')

Options:
--help                    Show this help message and exit
--commands                Show the full list of commands and exit

--decrypt                 Enable decryption of values using a GPG public key (default: disabled)
--encrypt                 Enable encryption of values using a GPG public key (default: disabled)
--name  &amp;lt;name&amp;gt;            Easily identifiable client name (default: randomly generated)
--host  &amp;lt;host&amp;gt;            Hostname or IP of the key/value server (default: localhost)
--pass  &amp;lt;data&amp;gt;            Password used to access the server (required)
--poll  &amp;lt;seconds&amp;gt;         Number of seconds for polling the key/value server (default: don't poll)
--port  &amp;lt;port&amp;gt;            TCP port of the key/value server (default: 6378)
-- STDIN                  Reads an argument from STDIN

COMMAND LIST              Commands are case-insensitive and don't always require arguments

  APPEND key value          		Append a value to a key
  BGSAVE                    		Asynchronously save the dataset to disk
  CLIENT ID                 		Returns the client ID for the current connection
  CLIENT KILL ID id [id ..]    		Kill the connection of a client
  CLIENT LIST               		Get the list of client connections
  CONVERT                   		Convert a plaintext database to binary or vice-versa
  DEL key [key ..]          		Delete a key
  EXISTS key [key ..]       		Determine if a key exists
  GET key                   		Get the value of a key
  GETSET key value          		Set the string value of a key and return its old value
  HDEL key field [field ..]    		Delete one or more hash fields
  HEXISTS key field         		Determine if a hash field exists
  HGET key field            		Get the value of a hash field
  HGETALL key               		Get all the fields and values in a hash
  HKEYS key                 		Get all the fields in a hash
  HLEN key                  		Get the number of fields in a hash
  HMGET key field [field ..]    	Get the values of all the given hash fields
  HSET key field value [field value ..] Set the string value of a hash field
  HSTRLEN key field         		Get the length of the value of a hash field
  HVALS key                 		Get all the values in a hash
  INFO [section]            		Get information and statistics about the server
  LINDEX key index          		Get an element from a list by its index
  LLEN key                  		Get the length of a list
  LPOP key                  		Remove and get the first element in a list
  LPOPRPUSH source destination    	Remove the first element in a list, append it to another list and return it
  LPUSH key element [element ..]    	Prepend one or multiple elements to a list
  LRANGE key start stop     		Get a range of elements from a list
  LREM key count element    		Remove elements from a list
  LSET key index element    		Set the value of an element in a list by its index
  LTRIM key start stop      		Trim a list to the specified range
  MGET key [key ..]         		Get the values of all the given keys
  MSET key value [key value ..]    	Set multiple keys to multiple values
  PING [message]            		Ping the server
  RPOP key                  		Remove and get the last element in a list
  RPOLRPUSH source destination    	Remove the last element in a list, prepend it to another list and return it
  RPUSH key element [element ..]    	Append one or multiple elements to a list
  SAVE                      		Synchronously save the dataset to disk
  SET key value             		Set the string value of a key
  STRLEN key                		Get the length of the value stored in a key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;notes-and-limitations&quot;&gt;Notes and limitations&lt;/h1&gt;

&lt;p&gt;This section will explain some important technical details about the code, and limitations on what this library can and can’t do.&lt;/p&gt;

&lt;h2 id=&quot;technical-notes&quot;&gt;Technical notes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;All keys are stored under the prefix &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*KV/&lt;/code&gt;, example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*KV/mykeys&lt;/code&gt;. This prefix is hardcoded everywhere and shouldn’t be changed.&lt;/li&gt;
  &lt;li&gt;Requests and commands generate statistics which are stored in memory (and lost when the server exits). Statistics are stored under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*KV/%stats%/&lt;/code&gt; prefix and are &lt;em&gt;read-only&lt;/em&gt; by external clients.&lt;/li&gt;
  &lt;li&gt;Similar to the &lt;a href=&quot;https://tools.ietf.org/html/rfc6455#section-1.3&quot;&gt;WebSockets protocol&lt;/a&gt;, a unique UUID: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;7672FDB2-4D29-4F10-BA7C-8EAD0E29626E&lt;/code&gt; is used during the handshake sequence between all clients and servers. For compatibility with future tools, please do not change it.&lt;/li&gt;
  &lt;li&gt;Passwords are hashed using a very simple and collision-prone hashing function. It is not cryptographically secure or used for that purpose. If using this library over a public network, please use &lt;a href=&quot;https://www.stunnel.org/&quot;&gt;stunnel&lt;/a&gt; or &lt;a href=&quot;https://github.com/varnish/hitch&quot;&gt;hitch&lt;/a&gt; as a TLS proxy between the client and server.&lt;/li&gt;
  &lt;li&gt;Output from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client.l&lt;/code&gt; uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(prinl)&lt;/code&gt;, so a result &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;2&quot;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt; will both appear the same. Lists are concatenated with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;,&lt;/code&gt; comma and also output using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(prinl)&lt;/code&gt;. Error messages are sent to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STDERR&lt;/code&gt; and the client exits with error code &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Named pipes are created in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(tmp)&lt;/code&gt; directory of the server’s parent process, and will be removed when the parent &lt;strong&gt;exits cleanly&lt;/strong&gt;. Please do not kill the parent process with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kill -9&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kill -KILL&lt;/code&gt;) as it will leave an unresponsive zombie sibling with the TCP socket still open, and the named pipes will not be removed.&lt;/li&gt;
  &lt;li&gt;A best effort has been made to return the same datatypes and response types as &lt;em&gt;Redis&lt;/em&gt;. Example: the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SET&lt;/code&gt; command returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OK&lt;/code&gt; if the key was set. Not all responses are absolutely identical to &lt;em&gt;Redis&lt;/em&gt; though. Please remember this library isn’t designed to be a perfect clone of &lt;em&gt;Redis&lt;/em&gt; (see Limitations below).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;limitations&quot;&gt;Limitations&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;This library is not used in production and has not been tested extensively (despite all the unit/integration tests). Please use at your own risk.&lt;/li&gt;
  &lt;li&gt;This library &lt;strong&gt;DOES NOT&lt;/strong&gt; use the &lt;a href=&quot;https://redis.io/topics/protocol&quot;&gt;RESP protocol&lt;/a&gt; and thus cannot work with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis-cli&lt;/code&gt; or other &lt;em&gt;Redis&lt;/em&gt; clients.&lt;/li&gt;
  &lt;li&gt;Since PicoLisp is not &lt;em&gt;event-based&lt;/em&gt;, each new TCP connection spawns a new process, which limits concurrency to the host’s available resources.&lt;/li&gt;
  &lt;li&gt;Not all &lt;a href=&quot;https://redis.io/commands&quot;&gt;Redis commands&lt;/a&gt; are implemented, because I didn’t have an immediate need for them. There are plans to slowly add new commands as the need arises.&lt;/li&gt;
  &lt;li&gt;Using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client.l&lt;/code&gt; on the command-line, all values are stored as strings. Please use the TCP socket or named pipe directly to store integers and lists.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Unlike &lt;em&gt;Redis&lt;/em&gt;, there is no on-disk persistence and &lt;strong&gt;all keys will be lost&lt;/strong&gt; when the server is restarted. This library was originally designed to be used as a temporary FIFO queue, with no need to persist the data. Support for persistence can be added eventually, and I’m open to pull-requests.&lt;/del&gt; Support for persistence has been added, see &lt;a href=&quot;#persistence&quot;&gt;Persistence&lt;/a&gt; below.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;how-it-works&quot;&gt;How it works&lt;/h1&gt;

&lt;p&gt;For the server, everything starts with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(kv-listen)&lt;/code&gt; function, which is where the TCP server is started:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+------------+   +---------------------+    +----------------+
| TCP client |   | (parent)            |    | (sibling)      |
+-----+---+--+   |    +-------------+  |    | +------------+ |
      ^   |      |    | TCP server  |  |    | | Key/Value  | |
      |   +---------&amp;gt; | (kv-listen) |  |    | | in-memory  | |
      |          |    +-------------+  |    | |     DB     | |
      |          |                     |    | +------------+ |
+-----+-------------&amp;gt; pipe_sibling +------&amp;gt; |                |
|                |                     |    +-+-+-+----------+
|  +--------+    |                     |      | | |
+--+ child1 | &amp;lt;-----+ pipe_child_1 &amp;lt;----------+ | |
|  +--------+    |                     |        | |
|                |                     |        | |
|  +--------+    |                     |        | |
+--+ child2 | &amp;lt;-----+ pipe_child_2 &amp;lt;------------+ |
|  +--------+    |                     |          |
|                |                     |          |
|  +--------+    |                     |          |
+--+ child3 | &amp;lt;-----+ pipe_child_3 &amp;lt;--------------+
   +--------+    |                     |
                 +---------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(kv-listen)&lt;/code&gt; is running, a TCP socket is opened on the configured port. An infinite loop begins and listens for incoming connections, giving each new TCP client its own forked child process for handling the request.&lt;/p&gt;

&lt;p&gt;A named pipe called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipe_sibling&lt;/code&gt;, is created in a temporary directory of the top-level &lt;strong&gt;parent&lt;/strong&gt; process. This pipe will be used to communicate with other &lt;strong&gt;child&lt;/strong&gt; processes, leaving the parent process to continue serving new TCP requests.&lt;/p&gt;

&lt;p&gt;The parent process then forks another process, which we’ll call the &lt;strong&gt;sibling&lt;/strong&gt; - an older sister if you prefer - and the sibling waits on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipe_sibling&lt;/code&gt; named pipe, listening for &lt;em&gt;COMMANDS&lt;/em&gt; from the child processes.&lt;/p&gt;

&lt;p&gt;The forked child processes will each create their own named pipe, called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipe_child_&amp;lt;pid&amp;gt;&lt;/code&gt;, also in a temporary directory of the top-level &lt;strong&gt;parent&lt;/strong&gt; process. The child process will listen on its own named pipe for messages sent by its older sister, the &lt;strong&gt;sibling&lt;/strong&gt;. Once a message is received by the child, the response is sent back to the &lt;strong&gt;client&lt;/strong&gt; over the TCP connection.&lt;/p&gt;

&lt;p&gt;The idea is to have the &lt;strong&gt;sibling&lt;/strong&gt; be the holder of all the &lt;strong&gt;keys&lt;/strong&gt;. Every &lt;em&gt;“Redis-like”&lt;/em&gt; command will have their data and statistics stored in the memory of the &lt;strong&gt;sibling&lt;/strong&gt; process, and the &lt;strong&gt;sibling&lt;/strong&gt; will handle receiving and sending its memory contents (keys/values) through named pipes to the respective &lt;strong&gt;child&lt;/strong&gt; processes.&lt;/p&gt;

&lt;h1 id=&quot;persistence&quot;&gt;Persistence&lt;/h1&gt;

&lt;p&gt;Similar to &lt;a href=&quot;https://redis.io/topics/persistence&quot;&gt;Redis&lt;/a&gt;, this database implements “snapshotting” (full memory dump to disk) and “AOF” (append-only log file), however both features are tightly coupled, which makes for a much better experience.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Persistence is disabled by default, but can be enabled with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--persist N&lt;/code&gt; parameter, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt; is the number of seconds between each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BGSAVE&lt;/code&gt; (background save to disk).&lt;/li&gt;
  &lt;li&gt;The database is stored in plaintext by default, but can be stored in binary with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--binary&lt;/code&gt; parameter. Binary format (PLIO) loads and saves &lt;em&gt;much&lt;/em&gt; quicker than plaintext, but it becomes difficult to debug a corrupt entry.&lt;/li&gt;
  &lt;li&gt;The AOF follows the &lt;em&gt;WAL&lt;/em&gt; approach, where each write command is first written to the AOF on disk, and then processed in the key/value memory store.&lt;/li&gt;
  &lt;li&gt;The AOF only stores log entries since the previous &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SAVE&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BGSAVE&lt;/code&gt;, so it technically shouldn’t grow too large or unmanageable.&lt;/li&gt;
  &lt;li&gt;The database snapshot on disk is the most complete and important data, and should be backed up regularly.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;fsync&lt;/em&gt; is not managed by the database, so the server admin must ensure AOF log writes are actually persisted to disk.&lt;/li&gt;
  &lt;li&gt;The AOF on-disk format is &lt;strong&gt;always plaintext&lt;/strong&gt;, to allow easy debugging and repair of a corrupt entry.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SAVE&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BGSAVE&lt;/code&gt; commands can still be sent even if persistence is disabled. This will dump the in-memory data to disk as if persistence was enabled.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-persistence-is-implemented&quot;&gt;How persistence is implemented&lt;/h2&gt;

&lt;p&gt;Here we’ll assume persistence was previously enabled and data has already been written and saved to disk.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;On server start, some memory is pre-allocated according to the DB’s file size.&lt;/li&gt;
  &lt;li&gt;The DB is then fully restored to memory&lt;/li&gt;
  &lt;li&gt;If the AOF contains some entries, it is fully replayed to memory&lt;/li&gt;
  &lt;li&gt;The DB is saved once more to disk and the AOF gets wiped&lt;/li&gt;
  &lt;li&gt;A timer is started to perform periodic background DB saves&lt;/li&gt;
  &lt;li&gt;Every new client connection sends the command to the AOF&lt;/li&gt;
  &lt;li&gt;When a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BGSAVE&lt;/code&gt; (non-blocking) command is received, a temporay copy of the AOF is made, the current AOF is wiped, and a background process is forked to save the DB to disk&lt;/li&gt;
  &lt;li&gt;A backup of the DB file is always made before overwriting the current DB file.&lt;/li&gt;
  &lt;li&gt;To help handle concurrency and persistence, temporary files are named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kv.db.lock&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kv.db.tmp&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kv.aof.lock&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kv.aof.tmp&lt;/code&gt;. It’s best not to modify or delete those files while the server is running. They can be safely removed while the server is stopped.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;aof-format&quot;&gt;AOF format&lt;/h2&gt;

&lt;p&gt;The AOF is stored by default in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kv.aof&lt;/code&gt; file as defined by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*KV_aof&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here are two separate entries in a typical AOF:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(&quot;1596099036.281142829&quot; 54042 (&quot;RPUSH&quot; &quot;mytestlist&quot; (&quot;four&quot; &quot;five&quot; &quot;six&quot;)))
(&quot;1596099059.683596840&quot; 57240 (&quot;RPUSH&quot; &quot;yourtestlist&quot; (&quot;seven&quot; &quot;eight&quot; &quot;nine&quot;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Each line is a PicoLisp list with only 3 items:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Item 1: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; Unix timestamp with nanoseconds for when the entry was created&lt;/li&gt;
  &lt;li&gt;Item 2: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Integer&lt;/code&gt; Non-cryptographically secure hash (CRC) of the command and its arguments&lt;/li&gt;
  &lt;li&gt;Item 3: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt; Command name, first argument, and subsequent arguments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When replaying the AOF, the server will ensure the hash of command and arguments match, to guarantee the data is intact. Replaying an AOF can be slow, depending on the number of keys/values.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Manually modifying the AOF will require recomputing and replacing the hash with the result from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(kv-hash)&lt;/code&gt; or PicoLisp &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(hash)&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(hash '(&quot;RPUSH&quot; &quot;mytestlist&quot; (&quot;four&quot; &quot;five&quot; &quot;zero&quot;)))
-&amp;gt; 61453
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;db-format&quot;&gt;DB format&lt;/h2&gt;

&lt;p&gt;The DB is stored by default in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kv.db&lt;/code&gt; file as defined by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*KV_db&lt;/code&gt;. When backed up, the new filename contains the suffix &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.old&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here are two separate entries in a typical DB:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(&quot;smalldata&quot; (&quot;test1&quot; &quot;test2&quot; &quot;test3&quot; &quot;test4&quot; &quot;test5&quot; &quot;test6&quot;))
(&quot;fooh_1000&quot; &quot;test data 1000&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Each line is a PicoLisp list with the key in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(car)&lt;/code&gt;, and values in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(cadr)&lt;/code&gt;. They are quickly replayed and stored in memory with a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(set)&lt;/code&gt; command.&lt;/p&gt;

&lt;h2 id=&quot;differences-from-redis&quot;&gt;Differences from Redis&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Unlike &lt;em&gt;Redis&lt;/em&gt;, persistence only allows specifying a time interval between each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BGSAVE&lt;/code&gt;. Since the AOF is &lt;strong&gt;always enabled&lt;/strong&gt;, it’s not necessary to “save after N changes”, so the config is much simpler.&lt;/li&gt;
  &lt;li&gt;Log rewriting is not something that “must be done”, because chances are the AOF will never grow too large. Of course that depends on the number of changes occurring between each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BGSAVE&lt;/code&gt;, but even then the AOF is wiped when a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BGSAVE&lt;/code&gt; is initiated (and restored/rewritten if there was an error).&lt;/li&gt;
  &lt;li&gt;The DB snapshot is used to reconstruct the dataset in memory, not the AOF. The AOF is only used to replay the commands since the last DB save, which is much faster and more efficient, particularly when using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--binary&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;There is no danger of &lt;em&gt;losing data&lt;/em&gt; when switching from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RDB&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AOF&lt;/code&gt;, because such a concept doesn’t even exist.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>GitHub Action to run 32-bit or 64-bit PicoLisp code</title>
   <link href="https://picolisp.a1w.ca/2020/01/02/action/"/>
   <updated>2020-01-02T00:00:00+09:00</updated>
   <id>https://picolisp.a1w.ca/2020/01/02/action</id>
   <content type="html">&lt;p&gt;You can &lt;a href=&quot;https://github.com/aw/picolisp-action&quot;&gt;get it on GitHub&lt;/a&gt; or the &lt;a href=&quot;https://github.com/marketplace/actions/picolisp-action&quot;&gt;GitHub Marketplace&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This action downloads, compiles, and globally installs PicoLisp.
It can be used to run PicoLisp code such as &lt;a href=&quot;https://github.com/aw/picolisp-unit&quot;&gt;units tests&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/153401/70022112-e4695580-158a-11ea-886d-0db01dbe7a66.png&quot; alt=&quot;Example PicoLisp tests&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;inputs&quot;&gt;Inputs&lt;/h2&gt;

&lt;h3 id=&quot;version&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;version&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Optional&lt;/strong&gt; The version of PicoLisp. Default ‘20.6’. Accepts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;19.12&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;19.6&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;18.12&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;18.6&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;17.12&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;latest&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pil21&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;architecture&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;architecture&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Optional&lt;/strong&gt; The architecture of PicoLisp (32 or 64-bit). Default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src64&lt;/code&gt;. Accepts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src64&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;example-usage&quot;&gt;Example usage&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- uses: aw/picolisp-action@v2
  with:
    version: 18.12
    architecture: src64

- name: Print Hello World with the full PicoLisp version number
  run: pil -'prin &quot;Hello World: &quot;' -version -bye
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;example-workflow&quot;&gt;Example workflow&lt;/h2&gt;

&lt;p&gt;See the &lt;a href=&quot;https://github.com/aw/picolisp-json/blob/master/.github/workflows/main.yml&quot;&gt;picolisp-json workflow&lt;/a&gt; for a more detailed usage example.&lt;/p&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;

&lt;p&gt;This action is written in CoffeeScript, see &lt;a href=&quot;index.coffee&quot;&gt;index.coffee&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Unknown values will be replaced with the default value (ex: version: 1.2.3, will become version: 19.12)&lt;/li&gt;
  &lt;li&gt;The PicoLisp environment is extracted to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tmp/picoLisp&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;32-bit PicoLisp is always compiled&lt;/li&gt;
  &lt;li&gt;64-bit PicoLisp is bootstrapped from the 32-bit PicoLisp&lt;/li&gt;
  &lt;li&gt;64-bit PicoLisp will not be compiled if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;architecture&lt;/code&gt; value is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pil21&lt;/code&gt; technically only works on 64-bit architectures&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;build&quot;&gt;Build&lt;/h2&gt;

&lt;p&gt;To build this action:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NodeJS v12&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Install the dev dependencies with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Generate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dist/index.js&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm run build&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>PicoLisp AWS CLI tool using OpenSSL and Curl</title>
   <link href="https://picolisp.a1w.ca/2019/03/15/awscurl/"/>
   <updated>2019-03-15T00:00:00+09:00</updated>
   <id>https://picolisp.a1w.ca/2019/03/15/awscurl</id>
   <content type="html">&lt;p&gt;You can &lt;a href=&quot;https://github.com/aw/picolisp-awscurl&quot;&gt;get it on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This command line tool can be used to sign &lt;a href=&quot;https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html&quot;&gt;AWS Signature Version 4&lt;/a&gt; requests and make calls to various AWS APIs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/aw/picolisp-awscurl&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/aw/picolisp-awscurl.svg&quot; alt=&quot;GitHub release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/aw/picolisp-unit.git&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/[deps]&amp;#32;picolisp--unit-v3.0.0-ff69b4.svg&quot; alt=&quot;Dependency&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://github.com/aw/picolisp-awscurl/workflows/CI/badge.svg?branch=master&quot; alt=&quot;Build status&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#usage&quot;&gt;Usage&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#options&quot;&gt;Options&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;requirements&quot;&gt;Requirements&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;picolisp&lt;/code&gt;: 32-bit or 64-bit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3.1.11+&lt;/code&gt;, tested up to PicoLisp &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v20.6.29&lt;/code&gt;, &lt;a href=&quot;https://github.com/aw/picolisp-awscurl/actions/&quot;&gt;see test runs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libcrypto.so&lt;/code&gt;: for using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--native&lt;/code&gt; functions with PicoLisp &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v17.12+&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;picolisp-unit&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3.0.0+&lt;/code&gt; for testing the library&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openssl&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.0.0+&lt;/code&gt; for signing and hashing strings&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt;: for sending requests to the AWS APIs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;notes&quot;&gt;Notes&lt;/h3&gt;

&lt;p&gt;The file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libawscurl.l&lt;/code&gt; can be included as a library, rather than using the command line &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awscurl.l&lt;/code&gt;. Function are prefixed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awscurl-&lt;/code&gt; and variables are prefixed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*Aws_&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;usage&quot;&gt;Usage&lt;/h1&gt;

&lt;h2 id=&quot;warning&quot;&gt;WARNING&lt;/h2&gt;

&lt;p&gt;There is currently &lt;strong&gt;no validation&lt;/strong&gt; on command line arguments. Be careful the input you provide. &lt;a href=&quot;https://github.com/aw/picolisp-awscurl/issues/1&quot;&gt;See issue #1&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;environment-variables&quot;&gt;Environment variables&lt;/h3&gt;

&lt;p&gt;The following environment variables are used:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWS_PROFILE&lt;/code&gt;: Default: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWS_ACCESS_KEY_ID&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWS_SESSION_TOKEN&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWS_SECURITY_TOKEN&lt;/code&gt; (deprecated)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If any of those environment variables are not set, the values will be read from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$HOME/.aws/credentials&lt;/code&gt; using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[default]&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$AWS_PROFILE&lt;/code&gt; profile.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Call S3: List bucket content&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./awscurl.l --service s3 --request PUT --data @myfile.json --header 'content-type' 'application/json' --host awscurl-sample-bucket.s3.amazonaws.com --region us-east-1 --endpoint '/bucket/myfile.json'
# NOTE: for files &amp;gt; 1KB, disable Expect header with: --header Expect &quot;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Call EC2 (DescribeRegions):&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./awscurl.l --query 'Action=DescribeRegions&amp;amp;Version=2013-10-15'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Call EC2 (ImportKeyPair):
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./awscurl.l --service ec2 --region ap-northeast-1 --host ap-northeast-1.ec2.amazonaws.com --query 'Action=ImportKeyPair&amp;amp;KeyName=my-key&amp;amp;Version=2016-11-15' --request POST --data 'PublicKeyMaterial=c3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCQVFDMkxIRitwY1g3ZmRtVWZRMm53TUt5ZmQ5ZktFQWVaY2dOblB5UDhCdmZnTGtSREZsZjV5ODR5Q09UbWdlS05Fd2Y1Ujhoei9ySmNwVEpNcURNS0pnS29qWVp5bWNTYzhROFpsY3lQdm5BYXZ5UEJVdUZYbUZMRDlpckNBcXREK3cxSEFpaVNlZyszdXN1VC9Vc1NKNWNOU3g4em5lSVhmMW9aSzJHQmswck90cEtwVy94c3gyNnNtUWNQWkxCMVYxSVc5NmRkbm1kUTNtQU1RNndPVUtSMytwckRWN2dhc2xOUjVTdkdaZnFreGpaUHNXcFNGRFlqN3I3WkU5MjB3YjIrT1RHQ1NIa21maUlDNVI3REdrUEc3emhEbk1yMHVlb3Qra1JRNjE4bklvQTVDeFhiaHdJalFYVTRFYjl3YVZsaXhmeGpmY1hjZGcwSEMyRnc5SHAgYWxleAo='
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Call API Gateway:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./awscurl.l --service execute-api --data '{&quot;test&quot;:&quot;json&quot;}' --host '&amp;lt;prefix&amp;gt;.execute-api.us-east-1.amazonaws.com' --endpoint '/&amp;lt;resource&amp;gt;'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;options&quot;&gt;Options&lt;/h1&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Usage:		./awscurl.l [options]

Options:
  --help                    Show this help message and exit

  --data &amp;lt;data&amp;gt;             HTTP POST data (default: None)
  --endpoint &amp;lt;endpoint&amp;gt;     The API endpoint of the AWS service (default: /)
  --header &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;    HTTP header data (default: None)
  --host &amp;lt;host&amp;gt;             The Host of the AWS service (default: ec2.amazonaws.com)
  --native                  Use faster 'native' calls for hashing data (64-bit version only, default: False)
  --output &amp;lt;file&amp;gt;           Filename where data should be output (default: STDOUT)
  --protocol http|https     Protocol for talking to AWS (default: https)
  --query &amp;lt;query&amp;gt;           The Query parameters of the AWS service (default: None)
  --region &amp;lt;region&amp;gt;         AWS region (default: us-east-1)
  --request &amp;lt;method&amp;gt;        Specify request method to use (default: GET)
  --service &amp;lt;service&amp;gt;       AWS service (default: ec2)
  --verbose                 Verbose flag (default: False)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>JSON Encoder/Decoder in pure PicoLisp</title>
   <link href="https://picolisp.a1w.ca/2018/05/11/json-v3/"/>
   <updated>2018-05-11T00:00:00+09:00</updated>
   <id>https://picolisp.a1w.ca/2018/05/11/json-v3</id>
   <content type="html">&lt;p&gt;You can &lt;a href=&quot;https://github.com/aw/picolisp-json&quot;&gt;get it on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This library can be used to parse and serialize (encode/decode) JSON strings in &lt;a href=&quot;http://picolisp.com/&quot;&gt;PicoLisp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/153401/6571543/56e31e44-c701-11e4-99f0-c2c51fd8061b.png&quot; alt=&quot;picolisp-json&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;explanation-json-encoderdecoder-in-pure-picolisp&quot;&gt;Explanation: JSON Encoder/Decoder in pure PicoLisp&lt;/h1&gt;

&lt;p&gt;This document provides a short walkthrough of the source code for the &lt;a href=&quot;https://github.com/aw/picolisp-json.git&quot;&gt;PicoLisp-JSON&lt;/a&gt; encoder/decoder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This document covers &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3&lt;/code&gt; of the JSON library. To view the older (C/ffi bindings) version &lt;a href=&quot;https://github.com/aw/picolisp-json/blob/v2.2.0/EXPLAIN.md&quot;&gt;click here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It’s split into a few sections for easier reading:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#global-variables&quot;&gt;Global variables&lt;/a&gt;: Important variables used throughout the library.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pure-picolisp-json-decoding&quot;&gt;Pure PicoLisp JSON decoding&lt;/a&gt;: Decoding JSON in PicoLisp, without external libraries.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#handling-unicode-characters&quot;&gt;Handling Unicode characters&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#stack--based-bracket-matching&quot;&gt;Stack-based bracket matching&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#object-and-array-validation&quot;&gt;Object and array validation&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#internal-functions&quot;&gt;Internal functions&lt;/a&gt;: Recursion and datatype-checking.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#decoding-json&quot;&gt;decoding JSON&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#encoding-json&quot;&gt;encoding JSON&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Make sure you read the &lt;a href=&quot;README.md&quot;&gt;README&lt;/a&gt; to get an idea of what this library does.&lt;/p&gt;

&lt;p&gt;Also, I recommend you visit my &lt;a href=&quot;https://picolisp.a1w.ca/&quot;&gt;PicoLisp Libraries Page&lt;/a&gt; for additional PicoLisp tips and ideas.&lt;/p&gt;

&lt;h1 id=&quot;global-variables&quot;&gt;Global variables&lt;/h1&gt;

&lt;p&gt;Prior to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;version 17.3.4&lt;/code&gt;, PicoLisp provided the &lt;a href=&quot;https://software-lab.de/doc/refL.html#local&quot;&gt;local&lt;/a&gt; function to prevent variables from leaking into the global namespace, however it was removed in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;32-bit&lt;/code&gt; version, and its semantics were changed, thus introducing a breaking change for anyone using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(local)&lt;/code&gt; in their code.&lt;/p&gt;

&lt;p&gt;To work around this issue, I modified the library to &lt;em&gt;disable&lt;/em&gt; namespaces by specifying the environment variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PIL_NAMESPACES=false&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-picolisp&quot;&gt;(unless (= &quot;false&quot; (sys &quot;PIL_NAMESPACES&quot;))
  (symbols 'json 'pico)

  (local MODULE_INFO *Msg err-throw)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This change allows the JSON library to be loaded correctly on all 32/64-bit systems using PicoLisp higher than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;version 3.1.9&lt;/code&gt; (for backwards compatibility), however if namespaces aren’t required, it’s probably best to &lt;em&gt;disable&lt;/em&gt; namespaces as mentioned above.&lt;/p&gt;

&lt;h1 id=&quot;pure-picolisp-json-decoding&quot;&gt;Pure PicoLisp JSON decoding&lt;/h1&gt;

&lt;p&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2&lt;/code&gt;, an external &lt;a href=&quot;https://github.com/kgabis/parson&quot;&gt;C library&lt;/a&gt; was used to perform JSON string decoding. This version gets rid of that dependency and performs all parsing directly in PicoLisp.&lt;/p&gt;

&lt;h3 id=&quot;handling-unicode-characters&quot;&gt;Handling Unicode characters&lt;/h3&gt;

&lt;p&gt;The JSON spec requires proper handling of Unicode characters written as: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\uNNNN&lt;/code&gt;, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt; is a hexadecimal digit, as well formfeed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\f&lt;/code&gt; and backspace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\b&lt;/code&gt;, which are not handled by PicoLisp. However it does handle newline &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\n -&amp;gt; ^J&lt;/code&gt;, carriage return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\r -&amp;gt; ^M&lt;/code&gt;, tab &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\t -&amp;gt; ^I&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Similar to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@lib/json.l&lt;/code&gt; included with PicoLisp, this library calls &lt;a href=&quot;https://software-lab.de/doc/refS.html#str&quot;&gt;str&lt;/a&gt; to tokenize the JSON string.&lt;/p&gt;

&lt;p&gt;Unforunately, the tokenization removes the single &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\&lt;/code&gt; from Unicode characters, turning &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\u006C&lt;/code&gt; into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u006c&lt;/code&gt;, rendering it impossible to safely differentiate it from a random string containg the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u006c&lt;/code&gt; character sequence.&lt;/p&gt;

&lt;p&gt;In that case, it’s necessary to parse the Unicode characters &lt;em&gt;before&lt;/em&gt; tokenizing the string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-picolisp&quot;&gt;(str (json-parse-unicode (chop Value)) &quot;_&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(json-parse-unicode)&lt;/code&gt; function receives a &lt;a href=&quot;https://software-lab.de/doc/refC.html#chop&quot;&gt;chop(ped)&lt;/a&gt; list of characters representing the full JSON string, and returns a &lt;a href=&quot;https://software-lab.de/doc/refP.html#pack&quot;&gt;pack(ed)&lt;/a&gt; string with all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\uNNNN&lt;/code&gt; values converted to their UTF-8 symbol:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-picolisp&quot;&gt;[de json-parse-unicode (Value)
  (pack
    (make
      (while Value
        (let R (pop 'Value)
          (cond
            [(and (= &quot;\\&quot; R) (= &quot;u&quot; (car Value))) (let U (cut 5 'Value) (link (char (hex (pack (tail 4 U) ] # \uNNNN hex
            [(and (= &quot;\\&quot; R) (= &quot;b&quot; (car Value))) (pop 'Value) (link (char (hex &quot;08&quot;) ] # \b backspace
            [(and (= &quot;\\&quot; R) (= &quot;f&quot; (car Value))) (pop 'Value) (link (char (hex &quot;0C&quot;) ] # \f formfeed
            (T (link R)) ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s see what’s going on here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://software-lab.de/doc/refM.html#make&quot;&gt;make&lt;/a&gt; is used to initiate a new list&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://software-lab.de/doc/refW.html#while&quot;&gt;while&lt;/a&gt; loops over the list stored in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Value&lt;/code&gt;, until the list is empty&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://software-lab.de/doc/refP.html#pop&quot;&gt;pop&lt;/a&gt; removes the first element from the list stored in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Value&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;A conditional check since we’re searching for a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\b&lt;/code&gt; (backspace), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\f&lt;/code&gt; (formfeed), or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\uNNNN&lt;/code&gt; (Unicode) character&lt;/li&gt;
  &lt;li&gt;If the character following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\&lt;/code&gt; (it’s escaped &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\&lt;/code&gt;) is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u&lt;/code&gt;, then we pop the next 5 items from the list (i.e: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uNNNN&lt;/code&gt;) using &lt;a href=&quot;https://software-lab.de/doc/refC.html#cut&quot;&gt;cut&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://software-lab.de/doc/refL.html#link&quot;&gt;link&lt;/a&gt; is used to add a new list to the list created with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(make)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Finally, we pack the last 4 items from the previously cut items (i.e: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NNNN&lt;/code&gt;), and use &lt;a href=&quot;https://software-lab.de/doc/refH.html#hex&quot;&gt;hex&lt;/a&gt; and &lt;a href=&quot;https://software-lab.de/doc/refC.html#char&quot;&gt;char&lt;/a&gt; to convert &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NNNN&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For Unicode characters, it ends up like this: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;\\u0065&quot; -&amp;gt; &quot;e&quot;&lt;/code&gt;. Yay!&lt;/p&gt;

&lt;h3 id=&quot;stack-based-bracket-matching&quot;&gt;Stack-based bracket matching&lt;/h3&gt;

&lt;p&gt;There’s no point in decoding a JSON file that isn’t valid, so an early detection method is to determine whether all the curly braces (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{}&lt;/code&gt;) and square brackets (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]&lt;/code&gt;) are matched.&lt;/p&gt;

&lt;p&gt;We’ll use a stack-based algorithm to count brackets, and only consider it a success if the stack is empty at the end.&lt;/p&gt;

&lt;p&gt;First, we provide the tokenized string to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(json-count-brackets)&lt;/code&gt; function, and map over each character. For each character, we perform the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-picolisp&quot;&gt;(if (or (= &quot;{&quot; N) (= &quot;[&quot; N))
    (push 'Json_stack N)
    (case N
      (&quot;]&quot; (let R (pop 'Json_stack) (unless (= &quot;[&quot; R) (err-throw &quot;Unmatched JSON brackets '['&quot;))))
      (&quot;}&quot; (let R (pop 'Json_stack) (unless (= &quot;{&quot; R) (err-throw &quot;Unmatched JSON brackets '{'&quot;)))) ) ) )
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;If the character is an opening &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[&lt;/code&gt;, &lt;a href=&quot;https://software-lab.de/doc/refP.html#push&quot;&gt;push&lt;/a&gt; it to the stack&lt;/li&gt;
  &lt;li&gt;If the character is a closing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;}&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;]&lt;/code&gt;, &lt;a href=&quot;https://software-lab.de/doc/refP.html#pop&quot;&gt;pop&lt;/a&gt; the next value from the stack, and if that character isn’t the matching bracket (i.e: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;}&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;]&lt;/code&gt;), then we have unmatched JSON brackets. Easy.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Those who are paying attention will notice the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(err-throw)&lt;/code&gt; function. It does two things:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-picolisp&quot;&gt;(msg Error)
(throw 'invalid-json NIL)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&quot;https://software-lab.de/doc/refM.html#msg&quot;&gt;msg&lt;/a&gt; function will output a message to STDERR, because the &lt;a href=&quot;https://en.wikipedia.org/wiki/Unix_philosophy#Mike_Gancarz:_The_UNIX_Philosophy&quot;&gt;UNIX Philosophy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://software-lab.de/doc/refT.html#throw&quot;&gt;throw&lt;/a&gt; function will raise an error in the program, with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'invalid-json&lt;/code&gt; label and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NIL&lt;/code&gt; return value.&lt;/p&gt;

&lt;p&gt;The decoder will &lt;a href=&quot;https://software-lab.de/doc/refC.html#catch&quot;&gt;catch&lt;/a&gt; the raised error, as it should, but more importantly, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NIL&lt;/code&gt; return value will indicate that decoding failed. This is important for programs which embed this library, as it won’t break a running program, and will behave exactly as expected when &lt;em&gt;something goes wrong&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;object-and-array-validation&quot;&gt;Object and array validation&lt;/h3&gt;

&lt;p&gt;We’ll briefly cover the validation for objects, arrays, and the separator.&lt;/p&gt;

&lt;p&gt;Essentially, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(json-array-check)&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(json-object-check)&lt;/code&gt; simply validate whether the value following the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[&lt;/code&gt; brackets are allowed.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(json-object-check-separator)&lt;/code&gt; is used to ensure a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt; separates the string from the value (ex: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{&quot;string&quot; : value}&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-picolisp&quot;&gt;[de json-object-check (Name)
  (or
    (lst? Name)
    (= &quot;}&quot; Name)
    (err-throw (text &quot;Invalid Object name '@1', must be '}' OR string&quot;, Name) ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, it’s quite simple, and if there’s no match, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(err-throw)&lt;/code&gt; will be called.&lt;/p&gt;

&lt;h1 id=&quot;internal-functions&quot;&gt;Internal functions&lt;/h1&gt;

&lt;p&gt;This part of the code was completely rewritten from scratch, so we’ll go through it together.&lt;/p&gt;

&lt;h2 id=&quot;decoding-json&quot;&gt;decoding JSON&lt;/h2&gt;

&lt;p&gt;We’ll begin by looking at how JSON is decoded in this library.&lt;/p&gt;

&lt;h3 id=&quot;iterate-object&quot;&gt;(iterate-object)&lt;/h3&gt;

&lt;p&gt;A fully tokenized JSON string might look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-picolisp&quot;&gt;(&quot;{&quot; (&quot;t&quot; &quot;e&quot; &quot;s&quot; &quot;t&quot;) &quot;:&quot; &quot;[&quot; 1 &quot;,&quot; 2 &quot;,&quot; 3 &quot;]&quot; &quot;}&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, look at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(iterate-object)&lt;/code&gt; function. This is a recursive function which loops and iterates through the global &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*Json&lt;/code&gt; variable, a list which contains the tokenized JSON string, and then quickly builds a sexy PicoLisp list.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-picolisp&quot;&gt;[de iterate-object ()
  (let Type (pop '*Json)
    (cond
      ((= &quot;[&quot; Type)     (make (link-array T)))
      ((= &quot;{&quot; Type)     (make (link-object)))
      ((lst? Type)      (pack Type))
      ((num? Type)      Type)
      ((= &quot;-&quot; Type)     (if (num? (car *Json)) (format (pack &quot;-&quot; (pop '*Json))) (iterate-object)))
      ((= 'true Type)   'true)
      ((= 'false Type)  'false)
      ((= 'null Type)   'null)
      (T                (err-throw (text &quot;Invalid Object '@1', must be '[' OR '{' OR string OR number OR true OR false OR null&quot;, Type) ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We treat the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*Json&lt;/code&gt; list as a stack, and iterate through it after popping one or more elements, until there’s nothing left but tears of joy.&lt;/p&gt;

&lt;p&gt;The condition for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[&lt;/code&gt; will start a new list with &lt;a href=&quot;https://software-lab.de/doc/refM.html#make&quot;&gt;make&lt;/a&gt;, and call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(link-array)&lt;/code&gt; with the argument &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt;. We’ll see why later.&lt;/p&gt;

&lt;p&gt;The rest is quite easy to understand, but I’ll focus on the case of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(= &quot;-&quot; Type)&lt;/code&gt;. The tokenization doesn’t recognize negative numbers, so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-32&lt;/code&gt; would be tokenized to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'(&quot;-&quot; 32)&lt;/code&gt;. To solve this, we check for a single &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;-&quot;&lt;/code&gt;, and if the next item in the list is a number, then we &lt;a href=&quot;https://software-lab.de/doc/refP.html#pop&quot;&gt;pop&lt;/a&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;-&quot;&lt;/code&gt;, &lt;a href=&quot;https://software-lab.de/doc/refP.html#pack&quot;&gt;pack&lt;/a&gt; it with the number (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(pack)&lt;/code&gt; creates a string), then use &lt;a href=&quot;https://software-lab.de/doc/refF.html#format&quot;&gt;format&lt;/a&gt; to convert it to a number.
In other words, our tokenized &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'(&quot;-&quot; 23) -&amp;gt; -23&lt;/code&gt;. Please note, since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-23&lt;/code&gt; is not a string, this could not have been done in the Unicode parsing stage. It must occur after tokenization with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(str)&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;link-array-and-link-object&quot;&gt;(link-array) and (link-object)&lt;/h3&gt;

&lt;p&gt;Both the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(link-array)&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(link-object)&lt;/code&gt; function make a call to the more generic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(link-generic)&lt;/code&gt; function. It accepts three arguments: the type of item, the closing bracket, and an unevaluated &lt;a href=&quot;https://software-lab.de/doc/refQ.html#quote&quot;&gt;quote(ed)&lt;/a&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-picolisp&quot;&gt;(link-generic &quot;array&quot;
                &quot;]&quot;
                '(link (iterate-object))
(link-generic &quot;object&quot;
                &quot;}&quot;
                '(link-object-value Name) ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;They’re quite similar. In both cases, the function will iterate once more over the object, depending on various conditions described in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(link-generic)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s look at some of the magic going on in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(link-generic)&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-picolisp&quot;&gt;# 1. ((any (pack &quot;json-&quot; Type &quot;-check&quot;)) Name)
# 2. (unless (= Bracket Name) (eval Iterator))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first looks a bit weird, but it essentially uses &lt;a href=&quot;https://software-lab.de/doc/refA.html#any&quot;&gt;any&lt;/a&gt; and &lt;a href=&quot;https://software-lab.de/doc/refP.html#pack&quot;&gt;pack&lt;/a&gt; to dynamically generate a function name, and then calls it with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Name&lt;/code&gt; argument.&lt;/p&gt;

&lt;p&gt;This gives something like: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(json-array-check &quot;[&quot;)&lt;/code&gt; - dynamically generate Lisp functions ftw!&lt;/p&gt;

&lt;p&gt;The second is a bit easier to grok, where it simply &lt;a href=&quot;https://software-lab.de/doc/refE.html#eval&quot;&gt;eval(uates)&lt;/a&gt; the given function passed as through the variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Iterator&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;t&quot;&gt;T&lt;/h3&gt;

&lt;p&gt;Earlier, we saw &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(link-array T)&lt;/code&gt; was called, but sometimes, only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(link-array)&lt;/code&gt; is called, without the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; argument. Why?&lt;/p&gt;

&lt;p&gt;To differentiate an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array&lt;/code&gt; from an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object&lt;/code&gt; in PicoLisp, we append &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; to the start of the list. When recursing, unless it’s a new array, we don’t provide the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; argument:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-picolisp&quot;&gt;(when Make (link T))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The previously tokenized JSON string would end up like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-picolisp&quot;&gt;((&quot;test&quot; T 1 2 3))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;encoding-json&quot;&gt;encoding JSON&lt;/h2&gt;

&lt;p&gt;The code for encoding JSON strings hasn’t changed, so feel free to &lt;a href=&quot;https://github.com/aw/picolisp-json/blob/master/EXPLAIN.md#encoding-json&quot;&gt;read about it here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SemVer for PicoLisp</title>
   <link href="https://picolisp.a1w.ca/2017/02/27/semver/"/>
   <updated>2017-02-27T00:00:00+09:00</updated>
   <id>https://picolisp.a1w.ca/2017/02/27/semver</id>
   <content type="html">&lt;p&gt;You can &lt;a href=&quot;https://github.com/aw/picolisp-semver&quot;&gt;get it on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This library can validate and compare &lt;strong&gt;Major.Minor.Patch&lt;/strong&gt; versions (ex: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;1.0.0&quot;&lt;/code&gt;).
It ignores pre-release, build, metadata, and special extensions (ex: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.alpha.1&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/153401/23364395/ceda769a-fcf6-11e6-9bf6-b7b0b8187f61.png&quot; alt=&quot;SemVer PicoLisp test output&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;requirements&quot;&gt;Requirements&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://picolisp.com&quot;&gt;PicoLisp&lt;/a&gt; 32-bit or 64-bit v16.12+&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;usage&quot;&gt;Usage&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Include &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;semver.l&lt;/code&gt; in your application: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(load &quot;semver.l&quot;)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Use one of the 5 public functions listed below&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Function&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Description&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Returns&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Example&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;semver-format&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Formats a version string into a list of integers&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;List of integers&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(1 4 2)&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;semver-cmp&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Compares two lists of integers&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;List containing NIL, 0 or T&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(NIL 0 T)&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;semver-compare&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Compares two version strings&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;NIL, 0, or T&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NIL&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;semver-compare-slow&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Compares two version strings using the spaceship &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;NIL, 0, or T&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;semver-sort&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Sorts a list of version strings&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;List of integers or strings&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;((1 3 0) (1 4 0) (1 6 0))&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&quot;1.3.0&quot; &quot;1.4.0&quot; &quot;1.6.0&quot;)&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Version comparison is always from left to right.&lt;/p&gt;

&lt;p&gt;A brief explanation of the result obtained from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;semver-compare&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if left &amp;lt; right then return NIL # left is older
if left = right then return  0 # left and right are the same
if left &amp;gt; right then return  T # left is newer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;examples&quot;&gt;Examples&lt;/h1&gt;

&lt;h3 id=&quot;1-compare-two-version-strings&quot;&gt;1. Compare two version strings&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(load &quot;semver.l&quot;)

(semver-compare &quot;1.4.0&quot; &quot;1.5.0&quot;)
-&amp;gt; NIL
(semver-compare &quot;1.5.0&quot; &quot;1.5.0&quot;)
-&amp;gt; 0
(semver-compare &quot;1.6.0&quot; &quot;1.5.0&quot;)
-&amp;gt; T
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-format-a-version-string-into-a-list-of-integers&quot;&gt;2. Format a version string into a list of integers&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(load &quot;semver.l&quot;)

(semver-format &quot;1.4.0&quot;)
-&amp;gt; (1 4 0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-compare-two-lists-of-integers&quot;&gt;3. Compare two lists of integers&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(car)&lt;/code&gt; corresponds to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;major&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(cadr)&lt;/code&gt; corresponds to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minor&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(caddr)&lt;/code&gt; corresponds to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;patch&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(load &quot;semver.l&quot;)

(semver-cmp (2 3 2) (1 4 2))
-&amp;gt; (T NIL 0)
(semver-cmp (1 5 0) (1 4 2))
-&amp;gt; (0 T NIL)
(semver-cmp (2 3 2) (1 4 2))
-&amp;gt; (T NIL 0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;4-sort-a-list-of-version-strings&quot;&gt;4. Sort a list of version strings&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(load &quot;semver.l&quot;)

(semver-sort '(&quot;1.4.0&quot; &quot;1.6.0&quot; &quot;1.3.0&quot;))
-&amp;gt; ((1 3 0) (1 4 0) (1 6 0))
(semver-sort '(&quot;1.4.0&quot; &quot;1.6.0&quot; &quot;1.3.0&quot;) T)
-&amp;gt; (&quot;1.3.0&quot; &quot;1.4.0&quot; &quot;1.6.0&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Unit Testing framework for PicoLisp</title>
   <link href="https://picolisp.a1w.ca/2015/03/18/unit/"/>
   <updated>2015-03-18T00:00:00+09:00</updated>
   <id>https://picolisp.a1w.ca/2015/03/18/unit</id>
   <content type="html">&lt;p&gt;You can &lt;a href=&quot;https://github.com/aw/picolisp-unit&quot;&gt;get it on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This library can be used for Unit Testing your &lt;a href=&quot;http://picolisp.com/&quot;&gt;PicoLisp&lt;/a&gt; code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/153401/6712097/b1b77e14-cd82-11e4-9603-cae666b8655d.png&quot; alt=&quot;picolisp-unit&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;explanation-unit-testing-framework-for-picolisp&quot;&gt;Explanation: Unit Testing framework for PicoLisp&lt;/h1&gt;

&lt;p&gt;This document provides a short walkthrough of the source code for the &lt;a href=&quot;https://github.com/aw/picolisp-unit&quot;&gt;PicoLisp-Unit&lt;/a&gt; testing framework.&lt;/p&gt;

&lt;p&gt;I won’t cover concepts which were discussed in previous source code explanations. You can read them here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/aw/picolisp-nanomsg/blob/master/EXPLAIN.md&quot;&gt;Nanomsg Explanation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/aw/picolisp-json/blob/master/EXPLAIN.md&quot;&gt;JSON Explanation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/aw/picolisp-https/blob/master/EXPLAIN.md&quot;&gt;HTTPS Explanation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This document is split into a few sections:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#namespace-leaky-globals&quot;&gt;Namespace leaky globals&lt;/a&gt;: Avoiding side-effects with Namespaces.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#internal-functions&quot;&gt;Internal functions&lt;/a&gt;: System calls and printing data to the terminal.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#system-calls&quot;&gt;System calls&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#printing-data&quot;&gt;Printing data&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#public-functions&quot;&gt;Public functions&lt;/a&gt;: Executing and asserting tests
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#executing-tests&quot;&gt;Executing a series of tests&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#assertions&quot;&gt;Asserting test results&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Make sure you read the &lt;a href=&quot;README.md&quot;&gt;README&lt;/a&gt; to get an idea of what this library does.&lt;/p&gt;

&lt;h1 id=&quot;namespace-leaky-globals&quot;&gt;Namespace leaky globals&lt;/h1&gt;

&lt;p&gt;Previously, I thought namespaces would protect my variables from modifying the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'pico&lt;/code&gt; namespace.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I was wrong&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here’s an example:&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*Myvar&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;I am a var&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;symbols&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'mytest&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'pico&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pico&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;mytest:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prinl&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*Myvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;I am a var&quot;&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;so&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;far&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;so&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;good&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;mytest:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*Myvar&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;You are a var&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;mytest:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;symbols&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'pico&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prinl&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*Myvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;You are a var&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What? Yes that’s right, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*Myvar&lt;/code&gt; which was originally in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'pico&lt;/code&gt; (default) namespace was modified from within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'mytest&lt;/code&gt; namespace. This is normal, but not expected, and quite dangerous actually.&lt;/p&gt;

&lt;h3 id=&quot;the-fix&quot;&gt;The fix&lt;/h3&gt;

&lt;p&gt;PicoLisp provides a nifty &lt;a href=&quot;http://software-lab.de/doc/refL.html#local&quot;&gt;local&lt;/a&gt; function for fixing that. I admit it’s a bit of a pain and quite ugly, but it does the job. You can consider it similar to JavaScript’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var&lt;/code&gt; expression.&lt;/p&gt;

&lt;p&gt;Let’s try again:&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*Myvar&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;I am a var&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;symbols&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'mytest&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'pico&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pico&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;mytest:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*Myvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;mytest:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prinl&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*Myvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;NIL&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;looks&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;promising&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;mytest:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*Myvar&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;You are a var&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;mytest:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;symbols&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'pico&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prinl&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*Myvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;I am a var&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is much better, as we can now guarantee “global” functions and variables will not accidentally create side-effects by overwriting existing functions or variables.&lt;/p&gt;

&lt;p&gt;This change has been applied everywhere now, and only public/exported functions can affect the global namespace.&lt;/p&gt;

&lt;h1 id=&quot;internal-functions&quot;&gt;Internal functions&lt;/h1&gt;

&lt;p&gt;Here we discuss system calls and printing data to the screen with specific alignment.&lt;/p&gt;

&lt;h3 id=&quot;system-calls&quot;&gt;System calls&lt;/h3&gt;

&lt;p&gt;A cool unit-testing framework always displays colours. Just ask anyone from Node.js land.&lt;/p&gt;

&lt;p&gt;To achieve this, we make use of an external &lt;a href=&quot;http://software-lab.de/doc/refC.html#call&quot;&gt;system call&lt;/a&gt;, the *NIX &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tput&lt;/code&gt; command.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;[de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;colour&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Colour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cond&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;assoc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lowc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Colour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*Colours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'tput&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;setaf&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lowc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Colour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bold&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'tput&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bold&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;T&lt;/span&gt;                              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'tput&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sgr0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;NIL&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s quite simple. The first condition checks if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Colour&lt;/code&gt; is part of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*Colours&lt;/code&gt; list. If yes, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tput setaf&lt;/code&gt; to set the terminal colour.&lt;/p&gt;

&lt;p&gt;The second condition checks if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Colour&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bold&lt;/code&gt;. If yes, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tput bold&lt;/code&gt; to set the text to bold.&lt;/p&gt;

&lt;p&gt;The default catch-all (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt;) resets the terminal back to normal.&lt;/p&gt;

&lt;p&gt;I tend to stay away from external system calls as we’re not always sure about the environment. In our case though, colour terminal is not such a big deal, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(colour)&lt;/code&gt; function will return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NIL&lt;/code&gt; whether &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tput&lt;/code&gt; succedes or fails.&lt;/p&gt;

&lt;h3 id=&quot;printing-data&quot;&gt;Printing data&lt;/h3&gt;

&lt;p&gt;Printing data to the screen is simple in PicoLisp, until you realize there are at least 5 known functions to do that: &lt;a href=&quot;http://software-lab.de/doc/refP.html#prin&quot;&gt;prin&lt;/a&gt;, &lt;a href=&quot;http://software-lab.de/doc/refP.html#prinl&quot;&gt;prinl&lt;/a&gt;, &lt;a href=&quot;http://software-lab.de/doc/refP.html#print&quot;&gt;print&lt;/a&gt;, &lt;a href=&quot;http://software-lab.de/doc/refP.html#println&quot;&gt;println&lt;/a&gt;, and &lt;a href=&quot;http://software-lab.de/doc/refP.html#printsp&quot;&gt;printsp&lt;/a&gt;. There’s probably more.&lt;/p&gt;

&lt;p&gt;In some cases, using a combination of multiple &lt;em&gt;printing&lt;/em&gt; functions can be helpful to achieve your designed results:&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;[de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;print-expected&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;align&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Expected: &quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;colour&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;green&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;colour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This has 2 print statements, but it only prints one line. The first uses &lt;a href=&quot;http://software-lab.de/doc/refA.html#align&quot;&gt;align&lt;/a&gt; to align the column to 8 spaces. This is really useful to help keep displayed text aligned in columns. The second prints the result and appends a newline at the end.&lt;/p&gt;

&lt;p&gt;An alternative would have been:&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;[de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;print-expected&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;align&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Expected: &quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;colour&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;green&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;Result&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;^J&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;colour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;^J&lt;/code&gt; character gets translated to a newline.&lt;/p&gt;

&lt;p&gt;You’ll notice we often call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(colour)&lt;/code&gt; without any arguments, to end-up in the &lt;em&gt;catch-all&lt;/em&gt; mentioned earlier, which resets the terminal.&lt;/p&gt;

&lt;h1 id=&quot;public-functions&quot;&gt;Public functions&lt;/h1&gt;

&lt;p&gt;Public functions do all the work in this library. They execute a series of tests, and they assert results to see if your test should pass or fail.&lt;/p&gt;

&lt;p&gt;I’ll admit I was inspired mostly by Ruby’s Minitest framework, which is quite huge compared to this one, but it pretty much does the same thing.&lt;/p&gt;

&lt;h3 id=&quot;executing-tests&quot;&gt;Executing tests&lt;/h3&gt;

&lt;p&gt;All good unit tests should be designed to run as &lt;strong&gt;units&lt;/strong&gt;. O’Rly? Yeah. This means the order of the tests shouldn’t matter at all. The units should not carry state, and this framework tests for that as well.&lt;/p&gt;

&lt;p&gt;The magic happens in a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(randomize)&lt;/code&gt; function which takes the list of tests to execute, randomizes it, and then returns the list.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;[de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;randomize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*My_tests_are_order_dependent&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;List&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rand&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It first checks if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*My_tests_are_order_dependent&lt;/code&gt; variable is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NIL&lt;/code&gt; (if it isn’t, don’t randomize).&lt;/p&gt;

&lt;p&gt;To randomize, it uses &lt;a href=&quot;http://software-lab.de/doc/refB.html#by&quot;&gt;by&lt;/a&gt;, not to be confused with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(bye)&lt;/code&gt; (that would be a major fail), and does stuff with it.&lt;/p&gt;

&lt;p&gt;There’s our &lt;em&gt;anonymous function&lt;/em&gt; again, used as the 1st argument to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(by)&lt;/code&gt;, which is cons’d to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt; (3rd argument), and then applied to the 2nd argument, which is the &lt;a href=&quot;http://software-lab.de/doc/refS.html#sort&quot;&gt;sort&lt;/a&gt; function.&lt;/p&gt;

&lt;p&gt;The 1st argument (anonymous function) generates a random number between 1 and the size of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It’s crazy how that works. I’m not even sure how I came up with that.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mapcar&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;align&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'*Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;) &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;randomize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once our list of tests is randomized, we run it through our favourite &lt;a href=&quot;http://software-lab.de/doc/refM.html#mapcar&quot;&gt;mapcar&lt;/a&gt; function which prints the test’s number, stored in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*Counter&lt;/code&gt;, aligned to 3 columns, and then evaluates (runs) the test using the infamous &lt;a href=&quot;http://software-lab.de/doc/refE.html#eval&quot;&gt;eval&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(align 3)&lt;/code&gt; allows the test numbers to go from 1 to 999 without breaking the beautiful output. We can increase that when someone actually encounters that problem.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;*Note:&lt;/em&gt; Technically, assertions don’t catch errors, so if your assertion were to throw an unhandled error, then the entire test suite would fail and ugly things will happen. In fact, your terminals colours might not even get reset. That’s a good thing. You should handle your errors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;assertions&quot;&gt;Assertions&lt;/h3&gt;

&lt;p&gt;PicoLisp natively supports assertions, and has a ton of predicates for testing and comparing values.&lt;/p&gt;

&lt;p&gt;This library introduces simple wrappers around those predicates, which then call a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(passed)&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(failed)&lt;/code&gt; function with additional arguments.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;[de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;assert-equal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Expected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Expected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;passed&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;failed&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Expected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This one is quite simple, all it does is check if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Expected&lt;/code&gt; is equal to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Result&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/aw/picolisp-unit/blob/master/README.md#assertions-table&quot;&gt;other assertions&lt;/a&gt; are quite similar and seem to cover most test cases. I’ve considered adding opposite tests such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;refute&lt;/code&gt;, but I’ve rarely found a need for them as there are alternate approaches.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>bcrypt hashing for PicoLisp</title>
   <link href="https://picolisp.a1w.ca/2015/03/17/bcrypt/"/>
   <updated>2015-03-17T00:00:00+09:00</updated>
   <id>https://picolisp.a1w.ca/2015/03/17/bcrypt</id>
   <content type="html">&lt;p&gt;You can &lt;a href=&quot;https://github.com/aw/picolisp-bcrypt&quot;&gt;get it on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This library can be used to hash strings (ex: passwords) using bcrypt in &lt;a href=&quot;http://picolisp.com/&quot;&gt;PicoLisp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/153401/6683641/cdb9492e-cc80-11e4-8c5c-24ba9504b90c.png&quot; alt=&quot;picolisp-bcrypt&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;bcrypt-hashing-for-picolisp&quot;&gt;bcrypt hashing for PicoLisp&lt;/h1&gt;

&lt;p&gt;Only the following functions are exported publicly, and namespaced with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(symbols 'bcrypt)&lt;/code&gt; (or the prefix: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bcrypt~&lt;/code&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;(gensalt Factor)&lt;/strong&gt; generates a salt to be used for hashing a string
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Factor&lt;/code&gt; &lt;em&gt;Number&lt;/em&gt;: a Number between 4 and 31, defaults to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;12&lt;/code&gt; otherwise&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;(hashpw Passwd Salt)&lt;/strong&gt; hashes a string with the salt provided
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Passwd&lt;/code&gt; &lt;em&gt;String&lt;/em&gt;: the String to be hashed&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Salt&lt;/code&gt; &lt;em&gt;String&lt;/em&gt; or &lt;em&gt;Number (optional)&lt;/em&gt;: a hash String or Number used as a cost Factor (will generate a salt automatically if a Number is provided)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;(compare Passwd Hash)&lt;/strong&gt; a predicate which compares the password and hash. Returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NIL&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Passwd&lt;/code&gt; &lt;em&gt;String&lt;/em&gt;: the password String&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash&lt;/code&gt; &lt;em&gt;String&lt;/em&gt;: the hashed String of the password&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;(timing Factor)&lt;/strong&gt; calculates the timing of a password hashing, in seconds. Returns the factor in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;car&lt;/code&gt; and seconds in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cdr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; These functions are not namespace &lt;a href=&quot;http://software-lab.de/doc/refL.html#local&quot;&gt;local symbols&lt;/a&gt;, which means they would redefine symbols with the same name in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'pico&lt;/code&gt; namespace.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;notes&quot;&gt;Notes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The default cost Factor is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;12&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;As rule of thumb, when using bcrypt to hash passwords, it should take &lt;em&gt;at least 1 second&lt;/em&gt; per hash. Adjust the cost Factor based on the result of a few (timing) runs.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'InternalError&lt;/code&gt; message will be thrown if there’s an error.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;examples&quot;&gt;Examples&lt;/h1&gt;

&lt;h3 id=&quot;gensalt-factor&quot;&gt;(gensalt Factor)&lt;/h3&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;pil&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bcrypt.l&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;symbols&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'bcrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;gensalt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$2a$12$mQn1fUDeEZFW74KD5kU6g.&quot;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;gensalt&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$2a$14$kjOSmjZeLsBdru7NRPEmQu&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;hashpw-passwd-salt&quot;&gt;(hashpw Passwd Salt)&lt;/h3&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;pil&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bcrypt.l&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;symbols&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'bcrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hashpw&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;changeme&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$2a$12$mmxN/qk8yvfjCx./KXtgfuqnUFsXjYv1ZTZmkMtdQ94rTDngiXpsq&quot;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hashpw&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;changeme&quot;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$2a$14$gZLc8eII8kCbXgFp2rUcv.PPr/oPioojVy0yP0HMU6z2La.v4pEnG&quot;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hashpw&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;changeme&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$2a$14$kjOSmjZeLsBdru7NRPEmQu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$2a$14$kjOSmjZeLsBdru7NRPEmQuL5eU5YN4Yb48bD1A0Pxzwu/3G/7kwBy&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;compare-passwd-hash&quot;&gt;(compare Passwd Hash)&lt;/h3&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;pil&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bcrypt.l&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;symbols&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'bcrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compare&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;changeme&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$2a$14$kjOSmjZeLsBdru7NRPEmQuL5eU5YN4Yb48bD1A0Pxzwu/3G/7kwBy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;T&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compare&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;changeme&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$2a$12$2Lgk0P5s5VsxDUM2aa/HFu/6DwHce1lbUwJ1kTm092DwEeDRHHYBy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;NIL&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'InternalError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compare&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;changeme&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;I have no idea what i'm doing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BcryptError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Unable to hash password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;timing-factor&quot;&gt;(timing Factor)&lt;/h3&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;pil&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bcrypt.l&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;symbols&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'bcrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;timing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;timing&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>HTTP(S) client for PicoLisp</title>
   <link href="https://picolisp.a1w.ca/2015/03/16/https/"/>
   <updated>2015-03-16T00:00:00+09:00</updated>
   <id>https://picolisp.a1w.ca/2015/03/16/https</id>
   <content type="html">&lt;p&gt;You can &lt;a href=&quot;https://github.com/aw/picolisp-https&quot;&gt;get it on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This library can be used to make HTTP and HTTPS requests in &lt;a href=&quot;http://picolisp.com&quot;&gt;PicoLisp&lt;/a&gt;, with support for authentication.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/153401/6665239/08fe38ee-cbcf-11e4-8289-603c985c1c0f.png&quot; alt=&quot;picolisp-https&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;explanation-https-client-for-picolisp&quot;&gt;Explanation: HTTP(S) client for PicoLisp&lt;/h1&gt;

&lt;p&gt;This document provides a short walkthrough of the source code for the &lt;a href=&quot;https://github.com/aw/picolisp-https.git&quot;&gt;PicoLisp-HTTPS&lt;/a&gt; client.&lt;/p&gt;

&lt;p&gt;I won’t cover concepts which were covered in previous source code explanations. You can read them here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/aw/picolisp-nanomsg/blob/master/EXPLAIN.md&quot;&gt;Nanomsg Explanation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/aw/picolisp-json/blob/master/EXPLAIN.md&quot;&gt;JSON Explanation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This document is split into a few sections:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#loading-and-initialization&quot;&gt;Loading and initialization&lt;/a&gt;: Loading files and performing initial work.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#error-handling&quot;&gt;Error handling&lt;/a&gt;: An idiom for handling errors.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#internal-functions&quot;&gt;Internal functions&lt;/a&gt;: Destructuring, native C callbacks, and memory management.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#making-https-requests&quot;&gt;making HTTPS requests&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#parsing-https-responses&quot;&gt;parsing HTTPS responses&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#cleaning-up-errors&quot;&gt;cleaning up errors&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Make sure you read the &lt;a href=&quot;README.md&quot;&gt;README&lt;/a&gt; to get an idea of what this library does.&lt;/p&gt;

&lt;h1 id=&quot;loading-and-initialization&quot;&gt;Loading and initialization&lt;/h1&gt;

&lt;p&gt;We’ve made some changes to how we load files across all libraries.&lt;/p&gt;

&lt;h3 id=&quot;loading&quot;&gt;Loading&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://picolisp.com&quot;&gt;PicoLisp&lt;/a&gt; loads files from the &lt;em&gt;current working directory&lt;/em&gt; &lt;a href=&quot;http://software-lab.de/doc/refP.html#pwd&quot;&gt;pwd&lt;/a&gt;, which is in relation to where you ran the command:&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;alex@dev-box:~/picolisp-https$&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pil&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/home/aw/picolisp-https&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So far so good, but what happens when the file you load also loads a file in a different directory? Depending if the path is relative or absolute, you will not necessarily get what you want.&lt;/p&gt;

&lt;p&gt;To fix this, we use &lt;a href=&quot;http://software-lab.de/doc/refF.html#file&quot;&gt;file&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;*Https&lt;/span&gt;              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;lib/libneon.so&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What this does is load the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/libneon.so&lt;/code&gt; relative to the file that’s loading it.&lt;/p&gt;

&lt;p&gt;We use this technique further down as well:&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ffi-bindings&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ffi.l&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;internal&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;internal.l&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Perhaps there should be a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(cwd)&lt;/code&gt; primitive for that? ;)&lt;/p&gt;

&lt;h3 id=&quot;initialization&quot;&gt;Initialization&lt;/h3&gt;

&lt;p&gt;There is a concept of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;constructors&lt;/code&gt; in PicoLisp, but it’s only used with classes and objects. We’re trying to be functional here.&lt;/p&gt;

&lt;p&gt;Our approach is simple: perform initialization tasks after loading all the necessary files.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;=0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ne-has-support&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*NE_FEATURE_SSL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;throw-error&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;NIL&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Missing support for SSL/TLS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What we’ve done here is try to ensure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SSL&lt;/code&gt; is compiled into the shared library. If it’s not, an error is thrown. &lt;a href=&quot;#error-handling&quot;&gt;Error handling&lt;/a&gt; is explained in the next section.&lt;/p&gt;

&lt;p&gt;We also ensure to &lt;a href=&quot;http://software-lab.de/doc/refS.html#seed&quot;&gt;seed&lt;/a&gt; some random data from the system’s random pool:&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;seed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/dev/urandom&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rd&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This tries to obtain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;20 bytes&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/urandom&lt;/code&gt; using &lt;a href=&quot;http://software-lab.de/doc/refR.html#rd&quot;&gt;rd&lt;/a&gt;, a function for reading raw bytes from an input stream, and initializes the seed with it.&lt;/p&gt;

&lt;h1 id=&quot;error-handling&quot;&gt;Error handling&lt;/h1&gt;

&lt;p&gt;PicoLisp provides us with a few ways to handle errors, so why not use them to our advantage?&lt;/p&gt;

&lt;p&gt;My idea was:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Throw errors in the library, but don’t quit/exit disgracefully (a.k.a. be nice).&lt;/li&gt;
  &lt;li&gt;Provide a &lt;em&gt;type&lt;/em&gt; of error, and a brief message explaining what happened.&lt;/li&gt;
  &lt;li&gt;Allow the user to catch the errors outside the library.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;[de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;throw-error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Session&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'InternalError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'HttpsError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Session&lt;/span&gt;
                                              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ne-get-error&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                              &lt;span class=&quot;nv&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;Neon C library&lt;/strong&gt; has a function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(ne-get-error)&lt;/code&gt; which returns a string containing an error message (if any). Sometimes, we want to provide our own error message though.&lt;/p&gt;

&lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(throw-error)&lt;/code&gt; function, we satisfy the first two requirements by using &lt;a href=&quot;http://software-lab.de/doc/refT.html#throw&quot;&gt;throw&lt;/a&gt; to send an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'InternalError&lt;/code&gt;, along with a &lt;a href=&quot;http://software-lab.de/doc/refC.html#cons&quot;&gt;cons&lt;/a&gt; pair containing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'HttpsError&lt;/code&gt; &lt;em&gt;type&lt;/em&gt; in the &lt;a href=&quot;http://software-lab.de/doc/refC.html#car&quot;&gt;car&lt;/a&gt; and the error &lt;em&gt;message&lt;/em&gt; in the &lt;a href=&quot;http://software-lab.de/doc/refC.html#cdr&quot;&gt;cdr&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The third requirement is satisfied in user applications with something like this:&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'InternalError&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HttpsError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Could not connect to server: Connection timed out&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;internal-functions&quot;&gt;Internal functions&lt;/h1&gt;

&lt;p&gt;As usual, the bulk of the library occurs in the internal functions.&lt;/p&gt;

&lt;h2 id=&quot;making-https-requests&quot;&gt;making HTTPS requests&lt;/h2&gt;

&lt;p&gt;PicoLisp 64-bit got a new feature in 2015: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;destructuring 'let'&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you’re coming from other languages such as Ruby, you would destructure an array like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;two&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In PicoLisp, we use this to obtain a Session (pointer) and Path (string), which is a cons pair returned by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(create-session)&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;[de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;create-session-request&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Url&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;create-session&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ne-request-create&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Session&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-headers&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Headers&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Session&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;create-session&quot;&gt;(create-session)&lt;/h3&gt;

&lt;p&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(create-session)&lt;/code&gt;, we parse the Url and obtain all the separate components, which are returned to us in a simple list. We’re already familiar with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(car)&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(cdr)&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(cddr)&lt;/code&gt;, etc, but there’s another primitive to get the exact item in a list: it’s the dreaded &lt;a href=&quot;http://software-lab.de/doc/ref_.html#;&quot;&gt;semicolon (;)&lt;/a&gt; &lt;em&gt;(insert JavaScript joke here)&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;[de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;create-session&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Fullurl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Uri&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;parse-uri&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Fullurl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;Scheme&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;Host&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cadr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;Auth&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; Uri 3)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;Port&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;get-port&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Scheme&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; Uri 4))&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;Session&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ne-session-create&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Scheme&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Host&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;Path&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; Uri 5) (when (; Uri 6) (pack &quot;?&quot; (; Uri 6)))) )&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(; Uri 3)&lt;/code&gt;. This is cool, it’ll get the item in the 3rd position in the list. In this case, it’s the auth credentials (usually user:password).&lt;/p&gt;

&lt;p&gt;The semicolon has other uses as well, so make sure you read about it.&lt;/p&gt;

&lt;h3 id=&quot;set-auth-credentials&quot;&gt;(set-auth-credentials)&lt;/h3&gt;

&lt;p&gt;This function does two things, one is dangerous, the other is cool.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;[de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;set-auth-credentials&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Session&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;[let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Credentials&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;split&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;chop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*User&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;*Pass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ne-set-server-auth&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;Session&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lisp&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'ne_auth_creds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;do-auth&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s talk about danger first. In this function, we uses &lt;a href=&quot;http://software-lab.de/doc/refS.html#setq&quot;&gt;setq&lt;/a&gt; to create some &lt;em&gt;temporary&lt;/em&gt; global variables. I say temporary because we get rid of them later. The danger here is this is &lt;strong&gt;NOT functional&lt;/strong&gt;. It’s a side-effect which could be the source of bugs in the future. OOP lovers don’t care about this kind of stuff, but in FP land it’s a big no-no.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The reason we do this is because of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(do-auth)&lt;/code&gt; function, which we’ll explain later.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;a href=&quot;http://software-lab.de/doc/refL.html#lisp&quot;&gt;lisp&lt;/a&gt; function is quite special. When using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(native)&lt;/code&gt; for C calls, certain functions require a callback as an argument, or “function pointer” (Google it).&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(ne-set-server-auth)&lt;/code&gt; function requires a callback as its second argument, so we create one using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(lisp)&lt;/code&gt;. If you’ve read the &lt;a href=&quot;https://github.com/aw/picolisp-json/blob/master/EXPLAIN.md#make-array&quot;&gt;JSON explanations&lt;/a&gt;, you’ll quickly notice there’s an anonymous function in this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(lisp)&lt;/code&gt; call. It essentially sends 5 arguments (which are numbers) to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(do-auth)&lt;/code&gt; function, under the name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ne_auth_creds&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s the C code to give a better picture:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;typedef int (*ne_auth_creds)(void *userdata, const char *realm, int attempt,
			     char *username, char *password);

void ne_set_server_auth(ne_session *sess, ne_auth_creds creds, void *userdata);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See that? All arguments for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ne_auth_creds&lt;/code&gt; are numbers (void, pointers, int)..&lt;/p&gt;

&lt;h3 id=&quot;do-auth&quot;&gt;(do-auth)&lt;/h3&gt;

&lt;p&gt;This function is our actual callback function. It’s the one that will be called from the C library.&lt;/p&gt;

&lt;p&gt;The main requirement is to set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password&lt;/code&gt;, and return an integer. We do that here:&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;do-auth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Userdata&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Realm&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Attempt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Username&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;native&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;@&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;strncpy&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;NIL&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Username&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*User&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*NE_ABUFSIZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;native&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;@&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;strncpy&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;NIL&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Password&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*Pass&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*NE_ABUFSIZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;Attempt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Whoa wait, what’s that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&lt;/code&gt; thing doing there? Remember we talked about the &lt;a href=&quot;https://github.com/aw/picolisp-nanomsg/blob/master/EXPLAIN.md#nn_symbols&quot;&gt;@ result&lt;/a&gt;? Well, this is &lt;strong&gt;NOT&lt;/strong&gt; that.&lt;/p&gt;

&lt;p&gt;This is actually a &lt;a href=&quot;http://software-lab.de/doc/native.html#libs&quot;&gt;transient symbol&lt;/a&gt; which refers to the main program (PicoLisp).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In english, this means you can call standard C functions like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strcpy&lt;/code&gt; (j/k, at least use strncpy).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This function uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*User and *Pass&lt;/code&gt; global variables we defined earlier and the C &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strncpy()&lt;/code&gt; functions to copy the global variables into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Username&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Password&lt;/code&gt; &lt;em&gt;pointers&lt;/em&gt;. The other approach would be to hardcode the username/password in the function, but really.. who does that?&lt;/p&gt;

&lt;p&gt;At the end of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(do-auth)&lt;/code&gt;, we return the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Attempt&lt;/code&gt; variable, which based on the &lt;strong&gt;Neon&lt;/strong&gt; documentation, would only perform &lt;em&gt;one&lt;/em&gt; authentication attempt before failing.&lt;/p&gt;

&lt;h3 id=&quot;del-auth-credentials&quot;&gt;(del-auth-credentials)&lt;/h3&gt;

&lt;p&gt;Of course, we need to remove the auth credentials once we’re done with them. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(ne-forget-auth)&lt;/code&gt; function will remove them from memory, and &lt;a href=&quot;http://software-lab.de/doc/refO.html#off&quot;&gt;off&lt;/a&gt; will set the global variables to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NIL&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;[de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;del-auth-credentials&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ne-forget-auth&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;off&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;off&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*Pass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We could have also done: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(off *User *Pass)&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;set-headers&quot;&gt;(set-headers)&lt;/h3&gt;

&lt;p&gt;There’s nothing magical in this function, just the usual mapping over a list with an &lt;strong&gt;anonymous function&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;[de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;set-headers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Headers&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mapcar&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ne-add-request-header&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Headers&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I want to highlight &lt;a href=&quot;http://software-lab.de/doc/refA.html#append&quot;&gt;append&lt;/a&gt; which can be used to &lt;em&gt;append&lt;/em&gt; a list to another. Who would have known?&lt;/p&gt;

&lt;p&gt;The tricky thing is there’s an order to it. We want the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Headers&lt;/code&gt; variable to be used before the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*Headers&lt;/code&gt; global variable. This way if you specify your own &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User-Agent&lt;/code&gt;, then it’ll use that instead of the default.&lt;/p&gt;

&lt;p&gt;There were other ways to do this, but I just wanted to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(append)&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;set-request-body&quot;&gt;(set-request-body)&lt;/h3&gt;

&lt;p&gt;Now here’s some more dangerous code if you haven’t seen it yet. This function is used to set the request Body (ex: in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PUT&lt;/code&gt; request) in a manually allocated buffer.&lt;/p&gt;

&lt;p&gt;The reason for this is due to an &lt;em&gt;interesting&lt;/em&gt; coding choice used in the &lt;strong&gt;Neon&lt;/strong&gt; C library. It doesn’t copy the body in memory for you, so at the end of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(native)&lt;/code&gt; call, the body (memory) is free’d and &lt;strong&gt;Neon&lt;/strong&gt; can’t use it anymore (because PicoLisp automatically frees memory).&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;[de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;set-request-body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Body&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;Buf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;native&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;@&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;malloc&quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'N&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;native&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;@&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;memset&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;NIL&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Buf&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Body&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;native&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;@&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;strncpy&quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'N&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Buf&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Body&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ne-set-request-body-buffer&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;Buf&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ll first obtain the &lt;a href=&quot;http://software-lab.de/doc/refS.html#size&quot;&gt;size&lt;/a&gt; of the request body. We do this for safety, and because it makes us feel warm inside.&lt;/p&gt;

&lt;p&gt;Since we’re forced to manually allocate a buffer for the request body, you can see lots of funky C stuff in there.&lt;/p&gt;

&lt;p&gt;In the end though, we’re able to send a perfectly good request body (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Buffer&lt;/code&gt;) in our HTTP(S) request.&lt;/p&gt;

&lt;p&gt;Some sharp eyes may notice we don’t &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;free&lt;/code&gt; the allocated memory here. &lt;em&gt;evil laugh&lt;/em&gt;. Don’t worry, we’ve actually handled this elegantly, which you can read about in &lt;a href=&quot;#cleaning-up-errors&quot;&gt;cleaning up errors&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;parsing-https-responses&quot;&gt;Parsing HTTPS responses&lt;/h2&gt;

&lt;p&gt;Here we cover the function which dispatches a request, and then processes the response.&lt;/p&gt;

&lt;h3 id=&quot;request-dispatch&quot;&gt;(request-dispatch)&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;Neon&lt;/strong&gt; C library provides a function to dispatch HTTP(S) requests, except for some odd reason it discards the response body before you can do anything with it. How horrible.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;[de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;request-dispatch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Body&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;loop&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;begin-request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Filename&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;download-file&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;process-body&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;end-request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;Body&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this function, we’ve got an infinite &lt;a href=&quot;http://software-lab.de/doc/refL.html#loop&quot;&gt;loop&lt;/a&gt; which tries to make a request, save the &lt;strong&gt;response body&lt;/strong&gt; to a file or whatever, and exits the loop when all is good.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(end-request)&lt;/code&gt; function implements a &lt;em&gt;retry&lt;/em&gt; mechanism, and returns either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NIL&lt;/code&gt; (or throws an error). If the result is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt;, we execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'done&lt;/code&gt;, which is nothing really, and return the response body. Otherwise it loops.&lt;/p&gt;

&lt;p&gt;There’s something &lt;em&gt;very&lt;/em&gt; different in this function though. Do you see it?&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Filename&lt;/code&gt; variable is not sent as an argument to the function. So, how does it work? If you look at the &lt;a href=&quot;#req&quot;&gt;req&lt;/a&gt; function, you’ll see the filename is (optionally) set as an argument. Our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(request-dispatch)&lt;/code&gt; function uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Filename&lt;/code&gt; variable from there.&lt;/p&gt;

&lt;p&gt;This is called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dynamic scoping&lt;/code&gt;, one of the great advantages of PicoLisp. You can do stuff like that.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Mr. Burger’s Note:&lt;/strong&gt; As much as this is an advantage, it’s also a sword hanging over your head. Use wisely.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;download-file&quot;&gt;(download-file)&lt;/h3&gt;

&lt;p&gt;This is a cool function. It checks if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Filename&lt;/code&gt; is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt;. If yes, then it generates a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(random-filename)&lt;/code&gt;, otherwise it uses the filename provided.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;[de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;download-file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;=T&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;random-filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;Filename&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Fd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ne-read-response-to-fd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;close&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Filename&quot;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Filesize&quot;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We use &lt;a href=&quot;http://software-lab.de/doc/refO.html#open&quot;&gt;open&lt;/a&gt; and &lt;a href=&quot;http://software-lab.de/doc/refC.html#close&quot;&gt;close&lt;/a&gt; when working with files. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(ne-read-response-to-fd)&lt;/code&gt; function is designed to write the response body to a file descriptor. How convenient.&lt;/p&gt;

&lt;p&gt;Finally, we return a list with two cons pairs, one containing the Filename (potentially randomly generated) and the other containing the Filesize, which is captured using the &lt;a href=&quot;http://software-lab.de/doc/refI.html#info&quot;&gt;info&lt;/a&gt; function.&lt;/p&gt;

&lt;h3 id=&quot;random-stuff&quot;&gt;random stuff&lt;/h3&gt;

&lt;p&gt;Earlier, we looked at seeding random data, why? Well here’s why:&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;random-filename&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dl-&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;random-id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.tmp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;[de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;random-id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lowc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(random-filename)&lt;/code&gt; function generates a string that looks like this: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dl-7d702f36-1.tmp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It uses &lt;a href=&quot;http://software-lab.de/doc/refT.html#tmp&quot;&gt;tmp&lt;/a&gt; to obtain the PicoLisp processes’s temp directory, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(random-id)&lt;/code&gt; function to generate a random id.&lt;/p&gt;

&lt;p&gt;Some cool functional stuff here: &lt;a href=&quot;http://software-lab.de/doc/refL.html#lowc&quot;&gt;lowc&lt;/a&gt; is used to lowercase a string, &lt;a href=&quot;http://software-lab.de/doc/refH.html#hex&quot;&gt;hex&lt;/a&gt; to generate a hexadecimal string, &lt;a href=&quot;http://software-lab.de/doc/refA.html#abs&quot;&gt;abs&lt;/a&gt; to return the absolute value of &lt;a href=&quot;http://software-lab.de/doc/refR.html#rand&quot;&gt;rand&lt;/a&gt; which returns a random integer (which should truly be random thanks to our &lt;a href=&quot;#initialization&quot;&gt;seed initialization&lt;/a&gt; from earlier).&lt;/p&gt;

&lt;h3 id=&quot;process-body&quot;&gt;(process-body)&lt;/h3&gt;

&lt;p&gt;This doesn’t do anything we haven’t seen before. It uses the familiar &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(make)&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(link)&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(pack)&lt;/code&gt; to generate a list.&lt;/p&gt;

&lt;p&gt;In fact, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(ne-read-response-block)&lt;/code&gt; function is set to only read a specific &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*Buffer_size&lt;/code&gt; &lt;em&gt;(8192 bytes)&lt;/em&gt; of data at a time. We have a simple loop in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(process-body)&lt;/code&gt; to obtain the full body and then pack it all together.&lt;/p&gt;

&lt;h3 id=&quot;parse-response&quot;&gt;(parse-response)&lt;/h3&gt;

&lt;p&gt;Without going into too much detail for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(parse-response)&lt;/code&gt;, I want to discuss something we haven’t seen yet: &lt;a href=&quot;http://software-lab.de/doc/refS.html#struct&quot;&gt;struct&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ne-get-status&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*ne_status&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;structure&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(struct)&lt;/code&gt; function can be used to &lt;em&gt;extract&lt;/em&gt; a C structure. The first argument is the structure, in our case it’s the result of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(ne-get-status)&lt;/code&gt;, and the structure contains 4 integers and 1 string.&lt;/p&gt;

&lt;p&gt;The C code for this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;typedef struct {
    int major_version;
    int minor_version;
    int code; /* Status-Code value */
    int klass; /* Class of Status-Code (1-5) */
    char *reason_phrase;
} ne_status;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We return those in the response for each request. Actually we don’t return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;klass&lt;/code&gt; because who cares.&lt;/p&gt;

&lt;h3 id=&quot;skipping-ahead-end-request-session&quot;&gt;Skipping ahead: (end-request-session)&lt;/h3&gt;

&lt;p&gt;When we’re done with our request/response, it’s time to clean up. We’ve got a nice function for that:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(de end-request-session (Request Session Buffer)
  (when Buffer (native &quot;@&quot; &quot;free&quot; NIL Buffer))
  (ne-request-destroy Request)
  (del-auth-credentials Session)
  (end-session Session) )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This free’s the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Buffer&lt;/code&gt; we allocated earlier using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The real question is: when is this called? Let’s get to that right now.&lt;/p&gt;

&lt;h2 id=&quot;cleaning-up-errors&quot;&gt;Cleaning up errors&lt;/h2&gt;

&lt;p&gt;Earlier, we discussed the ability to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(throw)&lt;/code&gt; an error, and that’s nice when something is there to catch it. But, what happens when that &lt;em&gt;thing&lt;/em&gt; doesn’t know about the internals? Does it know how to cleanly end the request, end the session, free up manually allocated buffers?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nope.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Our solution happens at the highest level in the most important function: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(req)&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;req&quot;&gt;(req)&lt;/h3&gt;

&lt;p&gt;This is our public function which does it all.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;[de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Url&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Headers&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Filename&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Session&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;create-session-request&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Url&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-request-body&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;finally&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;end-request-session&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Session&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;request-dispatch&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;parse-response&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Url&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first thing we do is obtain the request &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Buffer&lt;/code&gt; (which may possibly be empty). Next, we have this very useful &lt;a href=&quot;http://software-lab.de/doc/refF.html#finally&quot;&gt;finally&lt;/a&gt; call. That’s our safety net. The first argument is the &lt;em&gt;“thing you do if an error is throw, or when you’re done processing”&lt;/em&gt;. The second argument is the &lt;em&gt;“processing”&lt;/em&gt; part.&lt;/p&gt;

&lt;p&gt;In other words, if a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(throw)&lt;/code&gt; is called in our code, it will execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(end-request-session)&lt;/code&gt; which cleans memory and keeps things sane. Otherwise, it runs the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(request-dispatch)&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(parse-response)&lt;/code&gt;, then (finally) it runs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(end-request-session)&lt;/code&gt; before returning the response from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(parse-response)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Isn’t that amazing? Sasuga PicoLisp.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>JSON Encoder/Decoder for PicoLisp</title>
   <link href="https://picolisp.a1w.ca/2015/03/08/json/"/>
   <updated>2015-03-08T00:00:00+09:00</updated>
   <id>https://picolisp.a1w.ca/2015/03/08/json</id>
   <content type="html">&lt;p&gt;You can &lt;a href=&quot;https://github.com/aw/picolisp-json&quot;&gt;get it on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This library can be used to parse and serialize (encode/decode) JSON strings in &lt;a href=&quot;http://picolisp.com/&quot;&gt;PicoLisp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/153401/6571543/56e31e44-c701-11e4-99f0-c2c51fd8061b.png&quot; alt=&quot;picolisp-json&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;explanation-json-encoderdecoder-for-picolisp&quot;&gt;Explanation: JSON Encoder/Decoder for PicoLisp&lt;/h1&gt;

&lt;p&gt;This document provides a short walkthrough of the source code for the &lt;a href=&quot;https://github.com/aw/picolisp-json.git&quot;&gt;PicoLisp-JSON&lt;/a&gt; encoder/decoder.&lt;/p&gt;

&lt;p&gt;It’s split into a few sections for easier reading:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#global-variables&quot;&gt;Global variables&lt;/a&gt;: Important variables used throughout the library.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#native-calls-ffi-bindings&quot;&gt;Native calls (ffi-bindings)&lt;/a&gt;: The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parson&lt;/code&gt; native C library, and how it’s used.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#internal-functions&quot;&gt;Internal functions&lt;/a&gt;: Recursion and datatype-checking.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#decoding-json&quot;&gt;decoding JSON&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#encoding-json&quot;&gt;encoding JSON&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Make sure you read the &lt;a href=&quot;README.md&quot;&gt;README&lt;/a&gt; to get an idea of what this library does.&lt;/p&gt;

&lt;p&gt;Also, I recommend you read my &lt;a href=&quot;https://github.com/aw/picolisp-nanomsg/blob/master/EXPLAIN.md&quot;&gt;Nanomsg Explanation&lt;/a&gt; for additional PicoLisp tips and ideas.&lt;/p&gt;

&lt;h1 id=&quot;global-variables&quot;&gt;Global variables&lt;/h1&gt;

&lt;p&gt;PicoLisp does not prevent variables from leaking into the global namespace. In order to prevent that, you must use &lt;a href=&quot;http://software-lab.de/doc/refL.html#local&quot;&gt;local&lt;/a&gt; and define exactly what should &lt;em&gt;not&lt;/em&gt; affect the global namespace. This is important to avoid un-intended side-effects.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;MODULE_INFO&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*Json&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*JSONError&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*JSONNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will ensure the variables will not affect anything outside their current scope (namespace). It’s similar to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var Myvar;&lt;/code&gt; in JavaScript.&lt;/p&gt;

&lt;p&gt;A few global variables have been defined at the top of the file.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;*Json&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;lib/libparson.so&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;*JSONError&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;*JSONNull&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;*JSONString&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;*JSONNumber&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;*JSONObject&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;*JSONArray&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;*JSONBoolean&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;*JSONSuccess&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;*JSONFailure&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll notice I’m following the &lt;a href=&quot;http://software-lab.de/doc/ref.html#conv&quot;&gt;PicoLisp Naming Conventions&lt;/a&gt; this time.&lt;/p&gt;

&lt;p&gt;The variables prefixed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*JSON&lt;/code&gt; were copied directly from &lt;a href=&quot;https://github.com/kgabis/parson/blob/81c2fd0186cafb43c6b4c190b50bb3a4fef1827e/parson.h#L39-L54&quot;&gt;Parson’s source code&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;..
enum json_value_type {
    JSONError   = -1,
    JSONNull    = 1,
    JSONString  = 2,
..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When working with a native C library in PicoLisp, it’s important to use the same (or very similar) symbol names to avoid confusion.&lt;/p&gt;

&lt;h1 id=&quot;native-calls-ffi-bindings&quot;&gt;Native calls (ffi-bindings)&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kgabis/parson/&quot;&gt;Parson&lt;/a&gt; is a very simple C library, with functions accepting zero to three arguments, and returning simple validated values and structures.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;json-type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;json-parse-string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;{\&quot;Hello\&quot;:\&quot;World\&quot;}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt; which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*JSONObject&lt;/code&gt; based on our variables defined earlier.&lt;/p&gt;

&lt;p&gt;As we’ll see later, our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;picolisp-json&lt;/code&gt; library can make decisions on how to parse data based on these types of results.&lt;/p&gt;

&lt;h1 id=&quot;internal-functions&quot;&gt;Internal functions&lt;/h1&gt;

&lt;p&gt;The meat of this library is in the internal functions. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(json-parse-string)&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(json-parse-file)&lt;/code&gt; functions validate the JSON string. If those calls are successful, then we can safely iterate over the result and generate our own list.&lt;/p&gt;

&lt;h2 id=&quot;decoding-json&quot;&gt;decoding JSON&lt;/h2&gt;

&lt;p&gt;We’ll begin by looking at how JSON is decoded in this library.&lt;/p&gt;

&lt;h3 id=&quot;iterate-object&quot;&gt;(iterate-object)&lt;/h3&gt;

&lt;p&gt;We’ll first look at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(iterate-object)&lt;/code&gt; function. This is a recursive function which loops and iterates through the results of each native C call, and quickly builds a sexy PicoLisp list.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;[de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;iterate-object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;make&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;json-type&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Type&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;*JSONArray&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;link-json-array&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;*JSONObject&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;link-json-object&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;*JSONString&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;chain&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;json-string&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
                  &lt;span class=&quot;nv&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;*JSONBoolean&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;chain&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cond&lt;/span&gt;
                                            &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;json-boolean&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                            &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;json-boolean&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;*JSONNumber&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;chain&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;json-number&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;*JSONNull&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;chain&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lots of meat there.&lt;/p&gt;

&lt;h3 id=&quot;make&quot;&gt;(make)&lt;/h3&gt;

&lt;p&gt;We’ve seen &lt;a href=&quot;http://software-lab.de/doc/refM.html#make&quot;&gt;make&lt;/a&gt; before, but I didn’t fully explain it.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(make)&lt;/code&gt; function is the instigator for building a list. You put it at the top or start of your function, and watch it build lists using &lt;a href=&quot;http://software-lab.de/doc/refL.html#link&quot;&gt;link&lt;/a&gt; and &lt;a href=&quot;http://software-lab.de/doc/refC.html#chain&quot;&gt;chain&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We use &lt;a href=&quot;http://software-lab.de/doc/refC.html#case&quot;&gt;case&lt;/a&gt; here as our switch statement. This concept is similar in other programming language. This &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(case)&lt;/code&gt; call compares the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type&lt;/code&gt; value with those defined as global variables. If a match is found, it runs the following expression. Otherwise it returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NIL&lt;/code&gt; (aka: stop looping, i’m done damnit!).&lt;/p&gt;

&lt;p&gt;JSON Arrays and Objects are a bit more tricky to parse, so we’ll get to those later. In the case of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String, Boolean, Number or Null&lt;/code&gt;, we add them to the list using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(chain)&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;link-json-array&quot;&gt;(link-json-array)&lt;/h3&gt;

&lt;p&gt;When the value is an Array (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type = 5 = *JSONArray&lt;/code&gt;), we loop through it to build a list (arrays are mapped as lists).&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;[de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;link-json-array&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Arr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;json-array&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;json-array-get-count&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;json-array-get-value&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Arr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;iterate-object&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll notice we added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(link T)&lt;/code&gt; before the &lt;a href=&quot;http://software-lab.de/doc/refF.html#f&quot;&gt;for loop&lt;/a&gt;. After long discussions with Alexander Burger, it was made clear that a marker is required to differentiate Objects from Arrays (in PicoLisp). We do that by appending &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; as the first element in the list.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(for)&lt;/code&gt; loop is rather simple, but in each case we’re obtaining new values by performing native C calls, and then adding to the list using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(link)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you’ve had your coffee today, you would notice the &lt;a href=&quot;http://software-lab.de/doc/refD.html#dec&quot;&gt;dec&lt;/a&gt; call. As it turns out, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(for)&lt;/code&gt; starts with 1 and counts to the total number of items in the Array. We use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(dec N)&lt;/code&gt; to start at 0.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for N 5
  N = 1
  (json-array-get-value Arr 0)
  ..
  N = 2
  (json-array-get-value Arr 1)
  ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(link)&lt;/code&gt; function makes a call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(iterate-object)&lt;/code&gt;. Remember earlier? when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(link-json-array)&lt;/code&gt; was called within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(iterate-object)&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is called recursion, where a function calls itself (in our case, with a different value). You can &lt;a href=&quot;https://encrypted.google.com/search?hl=en&amp;amp;q=recursion&quot;&gt;ask Google&lt;/a&gt; about it.&lt;/p&gt;

&lt;p&gt;The reason we perform this recursion is in case the value in the array is itself an array or an object. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(iterate-object)&lt;/code&gt; function will simply return a string, boolean, number or null otherwise.&lt;/p&gt;

&lt;h3 id=&quot;link-json-object&quot;&gt;(link-json-object)&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(link-json-object)&lt;/code&gt; is similar to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(link-json-array)&lt;/code&gt; except, you guessed it, it loops over objects.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;iterate-object&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The other difference is during the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(link)&lt;/code&gt; call, it appends a &lt;a href=&quot;http://software-lab.de/doc/refC.html#cons&quot;&gt;cons&lt;/a&gt; pair instead of a single value. We do this because a JSON Object is represented as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(cons)&lt;/code&gt; pair in PicoLisp.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;lt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Of course, this function also recursively calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(iterate-object)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;encoding-json&quot;&gt;encoding JSON&lt;/h2&gt;

&lt;p&gt;Decoding was fun, because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parson&lt;/code&gt; did most of the work for us. Encoding is ugly, so I tried to make it as simple and intuitive as possible (less chance for bugs).&lt;/p&gt;

&lt;h3 id=&quot;iterate-list&quot;&gt;(iterate-list)&lt;/h3&gt;

&lt;p&gt;Since we now have a friendly JSON string represented as a PicoLisp list, we’ll iterate over it and turn it back into a JSON string.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;[de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;iterate-list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;or&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;get-null&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;get-boolean&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;get-json-number&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;get-json-string&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;get-json-array&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;make-object&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a bit sneaky, but I :heart: it. I’m not sure how efficient it is either, but it works well, and I’d rather have &lt;em&gt;slow, but valid data&lt;/em&gt; than &lt;em&gt;fast, but invalid data&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It’s not slow, in fact it’s incredibly fast based on my opinion of what fast looks like.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This function uses &lt;a href=&quot;http://software-lab.de/doc/refO.html#or&quot;&gt;or&lt;/a&gt; as a conditional statement. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Value&lt;/code&gt; passes through each function to determine the type of value it is, as well as to convert it to a string, number, boolean, null, or whatever.&lt;/p&gt;

&lt;h3 id=&quot;get-null&quot;&gt;(get-null)&lt;/h3&gt;

&lt;p&gt;This function does nothing special, but I wanted to show something interesting.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;[de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;get-null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'null&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;null&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll notice we check if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Value&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;==&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'null&lt;/code&gt;. What’s going on here? Using double equal signs checks for &lt;a href=&quot;http://software-lab.de/doc/ref.html#cmp&quot;&gt;&lt;strong&gt;Pointer equality&lt;/strong&gt;&lt;/a&gt;. This is really important, make sure you understand the difference for a happy PicoLisp life.&lt;/p&gt;

&lt;p&gt;This checks if the things we’re comparing are not just equal, but also &lt;em&gt;identical&lt;/em&gt;. In other words: Is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; the exact same thing as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Value&lt;/code&gt;). Not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;null&quot;&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt; or any other variation, but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;. Yes. Got it?&lt;/p&gt;

&lt;h3 id=&quot;get-json-array&quot;&gt;(get-json-array)&lt;/h3&gt;

&lt;p&gt;You should remember earlier we discussed appending &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; as the first element in the list, in the case of an Array.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;[de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;get-json-array&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;=T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;make-array&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What we’re doing here is checking if the &lt;a href=&quot;http://software-lab.de/doc/refC.html#car&quot;&gt;car&lt;/a&gt; of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Value&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt;. If yes, then call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(make-array)&lt;/code&gt; function.&lt;/p&gt;

&lt;h3 id=&quot;make-array&quot;&gt;(make-array)&lt;/h3&gt;

&lt;p&gt;This function builds an Array suitable for JSON.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;[de&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;make-array&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;glue&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;,&quot;&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mapcar&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;iterate-list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;NIL&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;]&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ve seen what &lt;a href=&quot;http://software-lab.de/doc/refP.html#pack&quot;&gt;pack&lt;/a&gt; does. We use it to build our Array with opening and closing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]&lt;/code&gt; brackets.&lt;/p&gt;

&lt;p&gt;The cool thing I discovered recently is &lt;a href=&quot;http://software-lab.de/doc/refG.html#glue&quot;&gt;glue&lt;/a&gt;. It is similar to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array.join()&lt;/code&gt; in Ruby and JavaScript, by concatenating a list with the supplied argument. In our case, it’s a comma &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;,&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here we’re doing something a little different.&lt;/p&gt;

&lt;p&gt;If you remember &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(mapcar)&lt;/code&gt;, you’ll know the first argument is a function, but in this code we have this:&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;iterate-list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;NIL&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Above is an &lt;strong&gt;anonymous function&lt;/strong&gt;. If you’re familiar with Ruby, it looks something like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the case of PicoLisp, our function that we defined on the fly will be applied to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Value&lt;/code&gt;, but will first make a recursive call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(iterate-list)&lt;/code&gt; with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(cons)&lt;/code&gt; pair as its argument.&lt;/p&gt;

&lt;h3 id=&quot;make-object&quot;&gt;(make-object)&lt;/h3&gt;

&lt;p&gt;This function is almost identical to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(make-array)&lt;/code&gt;, except it generates a JSON Object using opening and closing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{}&lt;/code&gt; braces, of course iterating recursively with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(iterate-list)&lt;/code&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Nanomsg FFI Bindings for PicoLisp</title>
   <link href="https://picolisp.a1w.ca/2015/02/22/nanomsg/"/>
   <updated>2015-02-22T00:00:00+09:00</updated>
   <id>https://picolisp.a1w.ca/2015/02/22/nanomsg</id>
   <content type="html">&lt;p&gt;You can &lt;a href=&quot;https://github.com/aw/picolisp-nanomsg&quot;&gt;get it on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;picolisp-nanomsg-explanation&quot;&gt;PicoLisp-Nanomsg Explanation&lt;/h1&gt;

&lt;p&gt;This document is an attempt to explain some of the source code for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PicoLisp-Nanomsg&lt;/code&gt; FFI bindings.&lt;/p&gt;

&lt;p&gt;It is not aimed at lisp experts, but rather newbies (like me), searching for tips and ideas on how to do lispy things using a &lt;a href=&quot;http://software-lab.de/doc/native.html&quot;&gt;Native C Library in PicoLisp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can consider it more like a tutorial or walkthrough, which I’ll try my best to keep updated along with the code.&lt;/p&gt;

&lt;h1 id=&quot;getting-started&quot;&gt;Getting started&lt;/h1&gt;

&lt;p&gt;If you haven’t already, then you should check out the &lt;a href=&quot;README.md&quot;&gt;README&lt;/a&gt; to get an idea of what this library does.&lt;/p&gt;

&lt;h1 id=&quot;explaining-nanomsgl&quot;&gt;Explaining nanomsg.l&lt;/h1&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nanomsg.l&lt;/code&gt; file is split into 3 major sections:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ffi-bindings&lt;/code&gt;: These are 1-1 function mappings with the Nanomsg C library.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;internal&lt;/code&gt;: Functions which you should not need to use unless implementing a new 1-1 mapping or public function.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt;: Functions which can be called by your application, mostly wrappers around &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;internal&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ffi-bindings&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;start-of-the-file&quot;&gt;Start of the file&lt;/h2&gt;

&lt;p&gt;At the top of the file, we define a PicoLisp namespace, and some global variables:&lt;/p&gt;

&lt;h3 id=&quot;namespaces&quot;&gt;Namespaces&lt;/h3&gt;

&lt;p&gt;PicoLisp allows you to define namespaces for your functions, using &lt;a href=&quot;http://software-lab.de/doc/refS.html#symbols&quot;&gt;symbols&lt;/a&gt;. It’s similar to the concept of &lt;em&gt;Modules&lt;/em&gt; in Ruby.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;symbols&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'nanomsg&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'pico&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, we create a namespace called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nanomsg&lt;/code&gt; which is a copy of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pico&lt;/code&gt; (default) namespace.&lt;/p&gt;

&lt;p&gt;Outside of this library, you can call functions by prefixing the tilde (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nanomsg~nn-errno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or you can switch namespace by declaring it first:&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;symbols&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'nanomsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nn-errno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Easy.&lt;/p&gt;

&lt;h3 id=&quot;global-variables&quot;&gt;Global variables&lt;/h3&gt;

&lt;p&gt;The PicoLisp naming conventions expect you to declare global variables prefixed by an asterisk (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt;) and a capital letter. For constants, I think it’s safe to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ALL_CAPS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s start with the first &lt;a href=&quot;http://software-lab.de/doc/refS.html#setq&quot;&gt;setq&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;MSG_MAX_SIZE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sys&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NANOMSG_MAX_SIZE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8192&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This uses the &lt;a href=&quot;http://software-lab.de/doc/refS.html#sys&quot;&gt;sys&lt;/a&gt; function to read an environment variable. If it exists, it uses &lt;a href=&quot;http://software-lab.de/doc/refS.html#format&quot;&gt;format&lt;/a&gt; to convert it to a Number (environment variables will always be read as Strings). If it doesn’t exist, then it assigns the Number &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8192&lt;/code&gt; as the value to MSG_MAX_SIZE.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I explicitly choose &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setq&lt;/code&gt; to allow you to change that value anytime you want, without setting off any warnings. Be careful when doing that though.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next:&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*Nanomsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;lib/libnanomsg.so&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we assign the name of the native C (shared) library (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libnanomsg.so&lt;/code&gt;) to a global variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*Nanomsg&lt;/code&gt;. It makes code a bit cleaner, particularly when dealing with native C libraries.&lt;/p&gt;

&lt;h2 id=&quot;1-ffi-bindings&quot;&gt;1. ffi-bindings&lt;/h2&gt;

&lt;p&gt;If you plan to write an &lt;a href=&quot;https://en.wikipedia.org/wiki/Foreign_function_interface&quot;&gt;ffi-binding&lt;/a&gt;, it’s a good idea to use the same function names as the C library.&lt;/p&gt;

&lt;p&gt;I’ll only go into detail of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn-getsockopt&lt;/code&gt;, since it seems to cover most aspects about native C calls.&lt;/p&gt;

&lt;h3 id=&quot;nn-getsockopt&quot;&gt;nn-getsockopt&lt;/h3&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;[de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nn-getsockopt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Sock&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Level&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Option&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;buf&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Buf&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;native&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;*Nanomsg&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;nn_getsockopt&quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'I&lt;/span&gt;
                                        &lt;span class=&quot;nv&quot;&gt;Sock&lt;/span&gt;
                                        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;symbol-val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;symbol-val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'Buf&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;buf&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                        &lt;span class=&quot;nv&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;Buf&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll quickly notice one of the arguments is named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;buf&lt;/code&gt;. In fact this should be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*buf&lt;/code&gt; to indicate a C pointer, but I didn’t want to induce confusion with global variables. The idea was to make it clear the value would receive a &lt;a href=&quot;http://software-lab.de/doc/refS.html#struct&quot;&gt;structure&lt;/a&gt; (I’ll explain this later).&lt;/p&gt;

&lt;p&gt;The second line: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(use Buf&lt;/code&gt; is something really lovely. The &lt;a href=&quot;http://software-lab.de/doc/refU.html#use&quot;&gt;use&lt;/a&gt; function allows you to &lt;em&gt;contain&lt;/em&gt; a variable which could become global otherwise. In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn-getsockopt&lt;/code&gt; function, the Buf variable would have been global if it weren’t for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(use&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first &lt;a href=&quot;http://software-lab.de/doc/refC.html#cons&quot;&gt;cons&lt;/a&gt; is there because we want to return the result of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;native&lt;/code&gt; call as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;car&lt;/code&gt;, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Buf&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cdr&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;square-brackets&quot;&gt;Square brackets&lt;/h4&gt;

&lt;p&gt;The attentive would notice I used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;]&lt;/code&gt; in places as opposed to parens &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;)&lt;/code&gt;. This is known as a &lt;a href=&quot;http://software-lab.de/doc/ref.html#macro-io&quot;&gt;super parens&lt;/a&gt; (the name is awesome!). It essentially closes all your parens with just one square bracket.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;my-func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;6]&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;think&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ugly,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;but&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;useful&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;My personal convention is to use a super parens at the end of a multi-line expression.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;[de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;my-func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Buf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;better&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sometimes it’s nice to use square brackets to clearly define the start and end of something.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;my-func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Arg1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Arg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;[let&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;Buf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;do-something-else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cleanup-everything&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Perhaps it’s just a matter of personal taste.&lt;/p&gt;

&lt;h4 id=&quot;the-native-call&quot;&gt;The native call&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://software-lab.de/doc/refN.html#native&quot;&gt;Native&lt;/a&gt; calls can be quite confusing at first.&lt;/p&gt;

&lt;p&gt;This call is identical to: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(native &quot;lib/libnanomsg.so&quot; &quot;nn_getsockopt&quot; ...&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The 3rd argument to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;native&lt;/code&gt; is the type of result the C function returns. We expect the result to be an Integer (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I&lt;/code&gt;). If your C function returns a pointer, set it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt;. When the result is a pointer, the value can be extracted using &lt;a href=&quot;http://software-lab.de/doc/refS.html#struct&quot;&gt;struct&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The next arguments are the ones expected by the C function. They can be Integers, Strings, Fixpoint numbers (cons pair) or Structures. In this case it’s:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;int nn_getsockopt (int s, int level, int option, void *optval, size_t *optvallen);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first three are Integers. We have an internal function called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;symbol-val&lt;/code&gt; which returns the value of the “constant” (string) specified. Example:&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;symbol-val&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NN_RCVFD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; There’s some magic behind this, because the Nanomsg C library authors created a function called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn-symbol&lt;/code&gt; which allows you to fetch every exported C constant, along with their values. That’s a really brilliant and helpful feature for people writing ffi-bindings. With most C libraries, you’ll need to define all the constants yourself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The 4th is the tricky one. It’s a Structure.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'Buf&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;buf&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;em&gt;Structure&lt;/em&gt; argument (a C pointer) is a list which must follow a very specific format:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a variable as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;car&lt;/code&gt;. In our case we call it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Buf&lt;/code&gt;. This variable will receive the result set in the pointer (also, potentially a structure).&lt;/li&gt;
  &lt;li&gt;a cons pair which will be sent to the C function.&lt;/li&gt;
  &lt;li&gt;An (optional) initialization value for the rest of the structure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are much more details available in the &lt;a href=&quot;http://software-lab.de/doc/refN.html#native&quot;&gt;native&lt;/a&gt; documentation.&lt;/p&gt;

&lt;p&gt;We could have replaced the above with this:&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'Buf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8192&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8192&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This would automatically create a buffer (in memory) of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8192 Bytes&lt;/code&gt; (set to 0), and expect a result of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8192 Bytes&lt;/code&gt; to be returned. Of course, all values which aren’t filled in the result will be set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; What’s nice about using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;native&lt;/code&gt; to allocate buffers is the memory is free’d once the call completes. If you use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc&lt;/code&gt; directly, then you need to free the memory as well. There’s no fun in that.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;2-internal&quot;&gt;2. internal&lt;/h2&gt;

&lt;p&gt;I mentioned earlier the existence of a magical &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn-symbol&lt;/code&gt; function. We use this to fetch all the C constants, and store them in an association list (key/value pairs).&lt;/p&gt;

&lt;h3 id=&quot;nn_symbols&quot;&gt;*NN_Symbols&lt;/h3&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;[de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fetch-symbols&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Index&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;make&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nn-symbol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'Index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*NN_Symbols&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fetch-symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*NN_Symbols&lt;/code&gt; internal global variable is created at runtime. It sets the local &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Index&lt;/code&gt; variable to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt;, and the local &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt; variable to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NIL&lt;/code&gt; (no value = NIL).&lt;/p&gt;

&lt;p&gt;It then uses &lt;a href=&quot;http://software-lab.de/doc/refM.html#make&quot;&gt;make&lt;/a&gt; and &lt;a href=&quot;http://software-lab.de/doc/refL.html#link&quot;&gt;link&lt;/a&gt; to generate a list from the result of the &lt;a href=&quot;http://software-lab.de/doc/refW.html#while&quot;&gt;while&lt;/a&gt; loop.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while&lt;/code&gt; loop calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn-symbol&lt;/code&gt; by using &lt;a href=&quot;http://software-lab.de/doc/refI.html#inc&quot;&gt;inc&lt;/a&gt; to increment the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Index&lt;/code&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;. The second argument to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn-symbol&lt;/code&gt; is a &lt;em&gt;Structure&lt;/em&gt; as we’ve seen earlier, which is really just one Integer of 4 Bytes.&lt;/p&gt;

&lt;p&gt;What’s interesting is the way this magic function works. It returns the name of the constant (ex: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;NN_RCVFD&quot;&lt;/code&gt;), but it sets the value of the constant in the buffer, which we assign to the variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt; (ex: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;11&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;We create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cons&lt;/code&gt; pair using the &lt;a href=&quot;http://software-lab.de/doc/ref.html#atres&quot;&gt;@ result&lt;/a&gt; as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;car&lt;/code&gt;, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt; result as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cdr&lt;/code&gt;. In this case, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&lt;/code&gt; result refers to the value returned by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn-symbol&lt;/code&gt; call.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In English, this means &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt; will contain a 4-byte Integer (value) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&lt;/code&gt; will contain the constant’s name.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn-symbol&lt;/code&gt; call returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NIL&lt;/code&gt;, then we’ve reached the end of the list of constants, so the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while&lt;/code&gt; loop exits, and our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*NN_Symbols&lt;/code&gt; variable is fully set:&lt;/p&gt;

&lt;p&gt;Here is a truncated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*NN_Symbols&lt;/code&gt; list from nanomsg 0.5-beta:&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;NN_NS_NAMESPACE&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;NN_NS_VERSION&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;NN_NS_DOMAIN&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;NN_NS_TRANSPORT&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;NN_NS_PROTOCOL&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;NN_NS_OPTION_LEVEL&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;NN_NS_SOCKET_OPTION&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cool.&lt;/p&gt;

&lt;h3 id=&quot;symbol-val&quot;&gt;symbol-val&lt;/h3&gt;

&lt;p&gt;This function is quite simple. It fetches the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cdr&lt;/code&gt; (the value) of the constant by it’s name, by searching through the association list.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;symbol-val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;assoc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Symbol&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*NN_Symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;exit-with-error&quot;&gt;exit-with-error&lt;/h3&gt;

&lt;p&gt;There’s nothing special about this function. I simply wanted to highlight the &lt;a href=&quot;http://software-lab.de/doc/refT.html#throw&quot;&gt;throw&lt;/a&gt; call, which stops the execution and returns a cons pair (error):&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;exit-with-error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Sock&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Endpoint&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ge0&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nn-shutdown&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Sock&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Sock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nn-close&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'InternalError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'NanomsgError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nn-strerror&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nn-errno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This can be caught with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(catch 'InternalError&lt;/code&gt;. The return value is a list which will contain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'NanomsgError&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;car&lt;/code&gt;, and a String in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cdr&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;make-socket&quot;&gt;make-socket&lt;/h3&gt;

&lt;p&gt;I won’t go into detail about the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make-socket&lt;/code&gt; internal function, but I was pleased to discover the &lt;a href=&quot;http://software-lab.de/doc/refD.html#default&quot;&gt;default&lt;/a&gt; function, which assigns a default value to a variable.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;[de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;make-socket&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Addr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Flag&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Domain&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AF_SP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, we assign the default value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;AF_SP&quot;&lt;/code&gt; to the variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Domain&lt;/code&gt; which is sent as an argument to the function. If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Domain&lt;/code&gt; is set (non-NIL), then its value is not re-assigned.&lt;/p&gt;

&lt;h3 id=&quot;non-blocking-io&quot;&gt;non-blocking-io&lt;/h3&gt;

&lt;p&gt;Sometimes you want to do something, sometimes you don’t. That’s a binary decision (0 or 1), and functions which return a true/false’ish type of result are called predicates. &lt;a href=&quot;http://software-lab.de/doc/refB.html#bool&quot;&gt;bool&lt;/a&gt; is a nice predicate which returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; if the value is set.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;non-blocking-io&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Dontwait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Dontwait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;symbol-val&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NN_DONTWAIT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this call, we want to return the value of the constant &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NN_DONTWAIT&lt;/code&gt;, but only if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dontwait&lt;/code&gt; argument is set. Otherwise it returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NIL&lt;/code&gt;. This is kind of a hack, since it can be set to anything and it will always return the value of the constant.&lt;/p&gt;

&lt;p&gt;There might be a better way to do this.&lt;/p&gt;

&lt;h2 id=&quot;3-public&quot;&gt;3. public&lt;/h2&gt;

&lt;p&gt;We’ve defined quite a few public functions which can be called from outside the library. Nanomsg doesn’t provide these, so we made them in order to make your life easier. Instead of interacting directly with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;native&lt;/code&gt; function calls, you can use a simple &lt;em&gt;public function&lt;/em&gt; and move on with your life.&lt;/p&gt;

&lt;p&gt;I’ll only explain the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msg-recv&lt;/code&gt; function, since it does some pretty cool stuff.&lt;/p&gt;

&lt;h3 id=&quot;msg-recv&quot;&gt;msg-recv&lt;/h3&gt;

&lt;p&gt;This function can be called in blocking or non-blocking mode. It will listen on a socket and wait for a message to arrive.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;[de&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;msg-recv&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Sock&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Dontwait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nn-recv&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MSG_MAX_SIZE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MSG_MAX_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;MSG_MAX_SIZE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;non-blocking-io&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Dontwait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;exit-with-error-maybe&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Dontwait&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mapcar&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first thing you’ll notice is this crazy argument sent to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn-recv&lt;/code&gt;. It’s something we saw earlier: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'(8192 B . 8192)&lt;/code&gt;. The reason we use the &lt;a href=&quot;http://software-lab.de/doc/refB.html#bool&quot;&gt;backtick&lt;/a&gt; (backquote) is to immediately evaluate the expression. You’ll notice the list is quoted with a &lt;a href=&quot;http://software-lab.de/doc/refQ.html#quote&quot;&gt;single quote&lt;/a&gt; for an unevaluated expression, but in fact we want to evaluate that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MSG_MAX_SIZE&lt;/code&gt; constant right away (turn it into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8192&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The next line will essentially exit the application depending on the result of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn-recv&lt;/code&gt; call and the value of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dontwait&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;The meat is here:&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mapcar&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you know, &lt;a href=&quot;http://software-lab.de/doc/refC.html#cdr&quot;&gt;cdr&lt;/a&gt; returns the result of the list (everything after the 1st element). And &lt;a href=&quot;http://software-lab.de/doc/refC.html#car&quot;&gt;car&lt;/a&gt; returns the 1st element of the list.&lt;/p&gt;

&lt;p&gt;When you pass these to &lt;a href=&quot;http://software-lab.de/doc/refH.html#head&quot;&gt;head&lt;/a&gt;, it will return only the first N elements (first argument) of the list (2nd argument).&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;104&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;108&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;108&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;111&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;104&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;108&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;108&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;111&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;104&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;108&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;108&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;111&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we fetched the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;12&lt;/code&gt; elements of the list.&lt;/p&gt;

&lt;p&gt;If you didn’t know, &lt;a href=&quot;http://software-lab.de/doc/refC.html#char&quot;&gt;char&lt;/a&gt; will return a Unicode character when you pass a Number as the argument.&lt;/p&gt;

&lt;p&gt;The use of &lt;a href=&quot;http://software-lab.de/doc/refM.html#mapcar&quot;&gt;mapcar&lt;/a&gt; is to iterate over the list, with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char&lt;/code&gt; function – essentially calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char&lt;/code&gt; on every element in the list.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://software-lab.de/doc/refP.html#pack&quot;&gt;pack&lt;/a&gt; function will remove all NIL values from the list. If you try to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(char 0)&lt;/code&gt; you’ll see it returns NIL.&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mapcar&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello^H&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; What this means is it receives the 8K buffer which contains a bunch of zeros at the end (assuming you didn’t fill the buffer), it maps over the list, sets the zeros to NIL, packs it and you end up with a nice friendly string.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This might also be a huge hack, but I thought it was cool and functional. Very open to suggestions on how to improve it.&lt;/p&gt;
</content>
 </entry>
 

</feed>
